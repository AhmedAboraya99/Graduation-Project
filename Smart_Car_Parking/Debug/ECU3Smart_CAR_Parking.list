
ECU3Smart_CAR_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002834  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a50  08002a50  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08002a50  08002a50  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a50  08002a50  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08002a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200000d8  08002b30  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002b30  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e5b  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ed  00000000  00000000  00029f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017aa  00000000  00000000  0002b649  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000390  00000000  00000000  0002cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  0002d188  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003711  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004aeb  00000000  00000000  00030b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000d234  00000000  00000000  0003566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000428a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ec4  00000000  00000000  0004291c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d8 	.word	0x200000d8
 800014c:	00000000 	.word	0x00000000
 8000150:	0800294c 	.word	0x0800294c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000dc 	.word	0x200000dc
 800016c:	0800294c 	.word	0x0800294c

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpun>:
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x10>
 8000a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2a:	d10a      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x20>
 8000a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3a:	d102      	bne.n	8000a42 <__aeabi_dcmpun+0x26>
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	f04f 0001 	mov.w	r0, #1
 8000a46:	4770      	bx	lr

08000a48 <Servo1_Entry_Gate_Init>:
#define DOWN 2


//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PinConfig_t PinConfg;
	PinConfg.GPIO_PINNumber=GPIO_PIN8;
 8000a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a52:	80bb      	strh	r3, [r7, #4]
	PinConfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000a54:	2304      	movs	r3, #4
 8000a56:	71bb      	strb	r3, [r7, #6]
	PinConfg.GPIO_Speed =GPIO_Speed_10MHZ;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB, &PinConfg);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <Servo1_Entry_Gate_Init+0x28>)
 8000a62:	f000 fd8a 	bl	800157a <MCAL_GPIO_init>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d10f      	bne.n	8000aa4 <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN8, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8a:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <Servo1_Entry_Gate+0x60>)
 8000a8c:	f000 fe09 	bl	80016a2 <MCAL_GPIO_WritePIN>
		Timer_dus(500);
 8000a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a94:	f001 f97e 	bl	8001d94 <Timer_dus>
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN8, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <Servo1_Entry_Gate+0x60>)
 8000aa0:	f000 fdff 	bl	80016a2 <MCAL_GPIO_WritePIN>
	}
	if(Direction==DOWN)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d10f      	bne.n	8000aca <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN8, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <Servo1_Entry_Gate+0x60>)
 8000ab2:	f000 fdf6 	bl	80016a2 <MCAL_GPIO_WritePIN>
		Timer_dus(1488);
 8000ab6:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000aba:	f001 f96b 	bl	8001d94 <Timer_dus>
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN8, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <Servo1_Entry_Gate+0x60>)
 8000ac6:	f000 fdec 	bl	80016a2 <MCAL_GPIO_WritePIN>
	}


}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010c00 	.word	0x40010c00

08000ad8 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_PinConfig_t PinConfg;
	PinConfg.GPIO_PINNumber=GPIO_PIN9;
 8000ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae2:	80bb      	strh	r3, [r7, #4]
	PinConfg.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	71bb      	strb	r3, [r7, #6]
	PinConfg.GPIO_Speed =GPIO_Speed_10MHZ;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB, &PinConfg);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <Servo2_Exit_Gate_Init+0x28>)
 8000af2:	f000 fd42 	bl	800157a <MCAL_GPIO_init>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10f      	bne.n	8000b34 <Servo2_Exit_Gate+0x30>
	{
		//servo2 Exit gate up +90
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN9, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <Servo2_Exit_Gate+0x60>)
 8000b1c:	f000 fdc1 	bl	80016a2 <MCAL_GPIO_WritePIN>
		Timer_dus(500);
 8000b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b24:	f001 f936 	bl	8001d94 <Timer_dus>
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN9, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <Servo2_Exit_Gate+0x60>)
 8000b30:	f000 fdb7 	bl	80016a2 <MCAL_GPIO_WritePIN>
	}

	if(Direction == DOWN)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d10f      	bne.n	8000b5a <Servo2_Exit_Gate+0x56>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN9, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <Servo2_Exit_Gate+0x60>)
 8000b42:	f000 fdae 	bl	80016a2 <MCAL_GPIO_WritePIN>
		Timer_dus(1488);
 8000b46:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000b4a:	f001 f923 	bl	8001d94 <Timer_dus>
		MCAL_GPIO_WritePIN(GPIOB, GPIO_PIN9, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <Servo2_Exit_Gate+0x60>)
 8000b56:	f000 fda4 	bl	80016a2 <MCAL_GPIO_WritePIN>
	}

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2};//columns

void Keypad_init(){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t keypad_pinconfig;

	//MODE: init GPIOB R0 pin as input(reset state)
	//CNF: make PORTB pin R0 as floating input
	keypad_pinconfig.GPIO_PINNumber = R0;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4824      	ldr	r0, [pc, #144]	; (8000c0c <Keypad_init+0xa4>)
 8000b7c:	f000 fcfd 	bl	800157a <MCAL_GPIO_init>

	//MODE: init GPIOB R1 pin as input(reset state)
	//CNF: make PORTB pin R1 as floating input
	keypad_pinconfig.GPIO_PINNumber = R1;
 8000b80:	2302      	movs	r3, #2
 8000b82:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000b84:	2301      	movs	r3, #1
 8000b86:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <Keypad_init+0xa4>)
 8000b8e:	f000 fcf4 	bl	800157a <MCAL_GPIO_init>

	//MODE: init GPIOB R2 pin as input(reset state)
	//CNF: make PORTB pin R2 as floating input
	keypad_pinconfig.GPIO_PINNumber = R2;
 8000b92:	2308      	movs	r3, #8
 8000b94:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481b      	ldr	r0, [pc, #108]	; (8000c0c <Keypad_init+0xa4>)
 8000ba0:	f000 fceb 	bl	800157a <MCAL_GPIO_init>

	//MODE: init GPIOB R3 pin as input(reset state)
	//CNF: make PORTB pin R3 as floating input
	keypad_pinconfig.GPIO_PINNumber = R3;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <Keypad_init+0xa4>)
 8000bb2:	f000 fce2 	bl	800157a <MCAL_GPIO_init>

	/************************************************************/

	//MODE: init GPIOB C0 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C0 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C0;
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <Keypad_init+0xa4>)
 8000bc8:	f000 fcd7 	bl	800157a <MCAL_GPIO_init>

	//MODE: init GPIOB C1 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C1 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C1;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <Keypad_init+0xa4>)
 8000bde:	f000 fccc 	bl	800157a <MCAL_GPIO_init>

	//MODE: init GPIOB C2 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C2 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C2;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000be6:	2304      	movs	r3, #4
 8000be8:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (KEYPAD_PORT,&keypad_pinconfig);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <Keypad_init+0xa4>)
 8000bf4:	f000 fcc1 	bl	800157a <MCAL_GPIO_init>

	MCAL_GPIO_WriteGroup(KEYPAD_PORT, 0xFF, 0x1F*R0);
 8000bf8:	221f      	movs	r2, #31
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <Keypad_init+0xa4>)
 8000bfe:	f000 fd75 	bl	80016ec <MCAL_GPIO_WriteGroup>

}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <Keypad_getkey>:

char Keypad_getkey(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 3; i++){
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	e08b      	b.n	8000d34 <Keypad_getkey+0x124>

		MCAL_GPIO_WritePIN(KEYPAD_PORT ,Key_padCol[0],GPIO_PIN_RESET);
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <Keypad_getkey+0x138>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	4619      	mov	r1, r3
 8000c26:	4849      	ldr	r0, [pc, #292]	; (8000d4c <Keypad_getkey+0x13c>)
 8000c28:	f000 fd3b 	bl	80016a2 <MCAL_GPIO_WritePIN>
		MCAL_GPIO_WritePIN(KEYPAD_PORT ,Key_padCol[1],GPIO_PIN_RESET);
 8000c2c:	4b46      	ldr	r3, [pc, #280]	; (8000d48 <Keypad_getkey+0x138>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4845      	ldr	r0, [pc, #276]	; (8000d4c <Keypad_getkey+0x13c>)
 8000c38:	f000 fd33 	bl	80016a2 <MCAL_GPIO_WritePIN>
		MCAL_GPIO_WritePIN(KEYPAD_PORT ,Key_padCol[2],GPIO_PIN_RESET);
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <Keypad_getkey+0x138>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	2200      	movs	r2, #0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4841      	ldr	r0, [pc, #260]	; (8000d4c <Keypad_getkey+0x13c>)
 8000c48:	f000 fd2b 	bl	80016a2 <MCAL_GPIO_WritePIN>
		MCAL_GPIO_WritePIN(KEYPAD_PORT ,Key_padCol[i],GPIO_PIN_SET);
 8000c4c:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <Keypad_getkey+0x138>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	483c      	ldr	r0, [pc, #240]	; (8000d4c <Keypad_getkey+0x13c>)
 8000c5c:	f000 fd21 	bl	80016a2 <MCAL_GPIO_WritePIN>
		for(j = 0; j < 4; j++){
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	e060      	b.n	8000d28 <Keypad_getkey+0x118>
			if ((MCAL_GPIO_ReadPIN(KEYPAD_PORT ,Key_padRow[j])))
 8000c66:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <Keypad_getkey+0x140>)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	4836      	ldr	r0, [pc, #216]	; (8000d4c <Keypad_getkey+0x13c>)
 8000c74:	f000 fcfe 	bl	8001674 <MCAL_GPIO_ReadPIN>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d051      	beq.n	8000d22 <Keypad_getkey+0x112>
			{
				while ((MCAL_GPIO_ReadPIN(KEYPAD_PORT ,Key_padRow[j])))
 8000c7e:	e044      	b.n	8000d0a <Keypad_getkey+0xfa>
				switch(i){
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d018      	beq.n	8000cb8 <Keypad_getkey+0xa8>
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d02a      	beq.n	8000ce0 <Keypad_getkey+0xd0>
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d000      	beq.n	8000c90 <Keypad_getkey+0x80>
 8000c8e:	e03c      	b.n	8000d0a <Keypad_getkey+0xfa>
					case (0):
						if (j == 0) return '*';
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <Keypad_getkey+0x8a>
 8000c96:	232a      	movs	r3, #42	; 0x2a
 8000c98:	e051      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 1) return '7';
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <Keypad_getkey+0x94>
 8000ca0:	2337      	movs	r3, #55	; 0x37
 8000ca2:	e04c      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 2) return '4';
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d101      	bne.n	8000cae <Keypad_getkey+0x9e>
 8000caa:	2334      	movs	r3, #52	; 0x34
 8000cac:	e047      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 3) return '1';
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d12a      	bne.n	8000d0a <Keypad_getkey+0xfa>
 8000cb4:	2331      	movs	r3, #49	; 0x31
 8000cb6:	e042      	b.n	8000d3e <Keypad_getkey+0x12e>
						break;
					case (1):
						if (j == 0) return '0';
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <Keypad_getkey+0xb2>
 8000cbe:	2330      	movs	r3, #48	; 0x30
 8000cc0:	e03d      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 1) return '8';
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <Keypad_getkey+0xbc>
 8000cc8:	2338      	movs	r3, #56	; 0x38
 8000cca:	e038      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 2) return '5';
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d101      	bne.n	8000cd6 <Keypad_getkey+0xc6>
 8000cd2:	2335      	movs	r3, #53	; 0x35
 8000cd4:	e033      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 3) return '2';
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d116      	bne.n	8000d0a <Keypad_getkey+0xfa>
 8000cdc:	2332      	movs	r3, #50	; 0x32
 8000cde:	e02e      	b.n	8000d3e <Keypad_getkey+0x12e>
						break;
					case (2):
						if (j == 0) return '#';
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <Keypad_getkey+0xda>
 8000ce6:	2323      	movs	r3, #35	; 0x23
 8000ce8:	e029      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 1) return '9';
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d101      	bne.n	8000cf4 <Keypad_getkey+0xe4>
 8000cf0:	2339      	movs	r3, #57	; 0x39
 8000cf2:	e024      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 2) return '6';
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d101      	bne.n	8000cfe <Keypad_getkey+0xee>
 8000cfa:	2336      	movs	r3, #54	; 0x36
 8000cfc:	e01f      	b.n	8000d3e <Keypad_getkey+0x12e>
						else if (j == 3) return '3';
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d101      	bne.n	8000d08 <Keypad_getkey+0xf8>
 8000d04:	2333      	movs	r3, #51	; 0x33
 8000d06:	e01a      	b.n	8000d3e <Keypad_getkey+0x12e>
						break;
 8000d08:	bf00      	nop
				while ((MCAL_GPIO_ReadPIN(KEYPAD_PORT ,Key_padRow[j])))
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <Keypad_getkey+0x140>)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <Keypad_getkey+0x13c>)
 8000d18:	f000 fcac 	bl	8001674 <MCAL_GPIO_ReadPIN>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1ae      	bne.n	8000c80 <Keypad_getkey+0x70>
		for(j = 0; j < 4; j++){
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	dd9b      	ble.n	8000c66 <Keypad_getkey+0x56>
	for (i = 0; i < 3; i++){
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3301      	adds	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	f77f af70 	ble.w	8000c1c <Keypad_getkey+0xc>

				}
			}
		}
	}
	return 'A';
 8000d3c:	2341      	movs	r3, #65	; 0x41
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	20000000 	.word	0x20000000

08000d54 <Keypad_getNum>:


char Keypad_getNum(char Num_len){
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	int Num = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
	int i = 1 ;
 8000d62:	2301      	movs	r3, #1
 8000d64:	613b      	str	r3, [r7, #16]
	uint8_t Temp_key = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
	while(log10(Num)+1 <= Num_len){
 8000d6a:	e020      	b.n	8000dae <Keypad_getNum+0x5a>
		while(Keypad_getkey() != 'A' && Keypad_getkey()<= '9' && Keypad_getkey() >='0'){

		Temp_key = Keypad_getkey()-48;
 8000d6c:	f7ff ff50 	bl	8000c10 <Keypad_getkey>
 8000d70:	4603      	mov	r3, r0
 8000d72:	3b30      	subs	r3, #48	; 0x30
 8000d74:	73fb      	strb	r3, [r7, #15]
			Num =  Num*i +(Temp_key);
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	fb02 f203 	mul.w	r2, r2, r3
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4413      	add	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
			i *= 10;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
		while(Keypad_getkey() != 'A' && Keypad_getkey()<= '9' && Keypad_getkey() >='0'){
 8000d90:	f7ff ff3e 	bl	8000c10 <Keypad_getkey>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b41      	cmp	r3, #65	; 0x41
 8000d98:	d009      	beq.n	8000dae <Keypad_getNum+0x5a>
 8000d9a:	f7ff ff39 	bl	8000c10 <Keypad_getkey>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b39      	cmp	r3, #57	; 0x39
 8000da2:	d804      	bhi.n	8000dae <Keypad_getNum+0x5a>
 8000da4:	f7ff ff34 	bl	8000c10 <Keypad_getkey>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b2f      	cmp	r3, #47	; 0x2f
 8000dac:	d8de      	bhi.n	8000d6c <Keypad_getNum+0x18>
	while(log10(Num)+1 <= Num_len){
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff fb30 	bl	8000414 <__aeabi_i2d>
 8000db4:	4603      	mov	r3, r0
 8000db6:	460c      	mov	r4, r1
 8000db8:	4618      	mov	r0, r3
 8000dba:	4621      	mov	r1, r4
 8000dbc:	f001 fb0e 	bl	80023dc <log10>
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <Keypad_getNum+0xa4>)
 8000dc6:	f7ff f9d9 	bl	800017c <__adddf3>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460c      	mov	r4, r1
 8000dce:	4625      	mov	r5, r4
 8000dd0:	461c      	mov	r4, r3
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb1d 	bl	8000414 <__aeabi_i2d>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fdfd 	bl	80009e0 <__aeabi_dcmple>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1d1      	bne.n	8000d90 <Keypad_getNum+0x3c>
		}
	}

	return Num;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	b2db      	uxtb	r3, r3
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}
 8000df8:	3ff00000 	.word	0x3ff00000

08000dfc <LCD_clear_screen>:


#define LCD_DATA_PORT(LCD) 		LCD->s_LCDDataPins.GPIOX
#define LCD_CONTROL_PORT(LCD)	LCD->s_LCDCtrlPins.GPIOX

void LCD_clear_screen(s_LCD_Config_t* LCD){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	LCD_WRITE_COMMAND(LCD, LCD_CLEAR_SCREEN);
 8000e04:	2101      	movs	r1, #1
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f907 	bl	800101a <LCD_WRITE_COMMAND>
	LCD->Ch_Counter=0;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	74da      	strb	r2, [r3, #19]
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <LCD_return_home>:

void LCD_return_home(s_LCD_Config_t* LCD){
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	LCD_WRITE_COMMAND(LCD, LCD_RETURN_HOME);
 8000e22:	2102      	movs	r1, #2
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f8f8 	bl	800101a <LCD_WRITE_COMMAND>
	LCD->Ch_Counter=0;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	74da      	strb	r2, [r3, #19]
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <LCD_lcd_kick>:

void LCD_lcd_kick(s_LCD_Config_t* LCD){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	MCAL_GPIO_WritePIN(LCD_CONTROL_PORT(LCD),LCD->s_LCDCtrlPins.enpin,GPIO_PIN_SET);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	88db      	ldrh	r3, [r3, #6]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f000 fc29 	bl	80016a2 <MCAL_GPIO_WritePIN>
	WAIT_ms(5);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f000 ffcb 	bl	8001dec <WAIT_ms>
	MCAL_GPIO_WritePIN(LCD_CONTROL_PORT(LCD),LCD->s_LCDCtrlPins.enpin,GPIO_PIN_RESET);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	88db      	ldrh	r3, [r3, #6]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	f000 fc1e 	bl	80016a2 <MCAL_GPIO_WritePIN>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <LCD_GOTO_XY>:

void LCD_GOTO_XY(s_LCD_Config_t*  LCD,unsigned char line, unsigned char position){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	70bb      	strb	r3, [r7, #2]
	uint32_t address;
	if (position < LINE_DIGITS && position >= 0)
 8000e80:	78bb      	ldrb	r3, [r7, #2]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d82d      	bhi.n	8000ee2 <LCD_GOTO_XY+0x72>
	{
		switch(line)
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d81a      	bhi.n	8000ec2 <LCD_GOTO_XY+0x52>
 8000e8c:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <LCD_GOTO_XY+0x24>)
 8000e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e92:	bf00      	nop
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000eab 	.word	0x08000eab
 8000e9c:	08000eb3 	.word	0x08000eb3
 8000ea0:	08000ebb 	.word	0x08000ebb
		{
			case 0:
				address = position;
 8000ea4:	78bb      	ldrb	r3, [r7, #2]
 8000ea6:	60fb      	str	r3, [r7, #12]
				break;
 8000ea8:	e00b      	b.n	8000ec2 <LCD_GOTO_XY+0x52>
			case 1:
				address = LCD_BEGIN_AT_ROW1+position;
 8000eaa:	78bb      	ldrb	r3, [r7, #2]
 8000eac:	3340      	adds	r3, #64	; 0x40
 8000eae:	60fb      	str	r3, [r7, #12]
				break;
 8000eb0:	e007      	b.n	8000ec2 <LCD_GOTO_XY+0x52>
			case 2:
				address = LCD_BEGIN_AT_ROW2+position;
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	3310      	adds	r3, #16
 8000eb6:	60fb      	str	r3, [r7, #12]
				break;
 8000eb8:	e003      	b.n	8000ec2 <LCD_GOTO_XY+0x52>
			case 3:
				address = LCD_BEGIN_AT_ROW3+position;
 8000eba:	78bb      	ldrb	r3, [r7, #2]
 8000ebc:	3350      	adds	r3, #80	; 0x50
 8000ebe:	60fb      	str	r3, [r7, #12]
				break;
 8000ec0:	bf00      	nop
		}
		LCD->Ch_Counter =line*LINE_DIGITS+position ;
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	78bb      	ldrb	r3, [r7, #2]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	74da      	strb	r2, [r3, #19]
		LCD_WRITE_COMMAND(LCD, LCD_SET_ROW+address);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3b80      	subs	r3, #128	; 0x80
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 f89c 	bl	800101a <LCD_WRITE_COMMAND>
	}
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop

08000eec <LCD_GPIO_INIT>:
void LCD_GPIO_INIT(s_LCD_Config_t* LCD){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

	/*MODE&CNF :make GPIOA (EN_SWITCH,RW_SWITCH,RS_SWITCH) pins
	 	 as floating input(reset state)
	 */
	GPIO_PinConfig_t LCD_pinconfig ={LCD->s_LCDCtrlPins.enpin, GPIO_Mode_OUT_PP, GPIO_Speed_10MHZ};
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	88db      	ldrh	r3, [r3, #6]
 8000ef8:	813b      	strh	r3, [r7, #8]
 8000efa:	2304      	movs	r3, #4
 8000efc:	72bb      	strb	r3, [r7, #10]
 8000efe:	2301      	movs	r3, #1
 8000f00:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_init(LCD_CONTROL_PORT(LCD),&LCD_pinconfig);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f107 0208 	add.w	r2, r7, #8
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fb34 	bl	800157a <MCAL_GPIO_init>

	LCD_pinconfig.GPIO_PINNumber = LCD->s_LCDCtrlPins.rspin;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_init (LCD_CONTROL_PORT(LCD),&LCD_pinconfig);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f107 0208 	add.w	r2, r7, #8
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fb29 	bl	800157a <MCAL_GPIO_init>

	LCD->Ch_Counter = 0;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	74da      	strb	r2, [r3, #19]
	/************************************************************/

	//MODE&CNF: init GPIOA PIN(0-7) as as push-pull outputs with 10MHZ speed
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7c9b      	ldrb	r3, [r3, #18]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	d819      	bhi.n	8000f6a <LCD_GPIO_INIT+0x7e>
	{
		//*(LCD->s_LCDDataPins.p_DataDireReg) |= (0x0F << LCD->s_LCDDataPins.DataPinStart);
		for(uint8_t i =0;i<4;i++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e012      	b.n	8000f62 <LCD_GPIO_INIT+0x76>
			LCD_pinconfig.GPIO_PINNumber = LCD->s_LCDDataPins.DataPinStart << i;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	899b      	ldrh	r3, [r3, #12]
 8000f40:	461a      	mov	r2, r3
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_init(LCD_DATA_PORT(LCD),&LCD_pinconfig);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f107 0208 	add.w	r2, r7, #8
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fb0f 	bl	800157a <MCAL_GPIO_init>
		for(uint8_t i =0;i<4;i++){
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d9e9      	bls.n	8000f3c <LCD_GPIO_INIT+0x50>
			LCD_pinconfig.GPIO_PINNumber = LCD->s_LCDDataPins.DataPinStart << i;
			MCAL_GPIO_init(LCD_DATA_PORT(LCD),&LCD_pinconfig);
		}
	}

}
 8000f68:	e018      	b.n	8000f9c <LCD_GPIO_INIT+0xb0>
		for(uint8_t i =0;i<8;i++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e012      	b.n	8000f96 <LCD_GPIO_INIT+0xaa>
			LCD_pinconfig.GPIO_PINNumber = LCD->s_LCDDataPins.DataPinStart << i;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	899b      	ldrh	r3, [r3, #12]
 8000f74:	461a      	mov	r2, r3
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_init(LCD_DATA_PORT(LCD),&LCD_pinconfig);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 faf5 	bl	800157a <MCAL_GPIO_init>
		for(uint8_t i =0;i<8;i++){
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73bb      	strb	r3, [r7, #14]
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	d9e9      	bls.n	8000f70 <LCD_GPIO_INIT+0x84>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LCD_INIT>:

void LCD_INIT(s_LCD_Config_t*  LCD ){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	LCD_GPIO_INIT(LCD);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff9d 	bl	8000eec <LCD_GPIO_INIT>

	LCD_return_home(LCD);				/* send for initialization of LCD  */
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff31 	bl	8000e1a <LCD_return_home>
	LCD_WRITE_COMMAND(LCD ,FUNCTION_SET + LCD->e_OperMode);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7c9b      	ldrb	r3, [r3, #18]
 8000fbc:	3320      	adds	r3, #32
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f829 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD ,LCD_DISP_CONTROL + LCD->e_DispCtrl);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7c5b      	ldrb	r3, [r3, #17]
 8000fcc:	3308      	adds	r3, #8
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f821 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD,LCD_ENTRY_MODE+LCD->e_EntryMode);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7c1b      	ldrb	r3, [r3, #16]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f819 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_clear_screen(LCD);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff07 	bl	8000dfc <LCD_clear_screen>
	LCD_return_home(LCD);				/* send for initialization of LCD  */
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff13 	bl	8000e1a <LCD_return_home>
	LCD_WRITE_COMMAND(LCD,LCD_SET_ROW);
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f80f 	bl	800101a <LCD_WRITE_COMMAND>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(s_LCD_Config_t*  LCD){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]


	WAIT_ms(5);
 800100c:	2005      	movs	r0, #5
 800100e:	f000 feed 	bl	8001dec <WAIT_ms>
	
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(s_LCD_Config_t* LCD,unsigned char command){
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]
	LCD_check_lcd_isbusy(LCD);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffec 	bl	8001004 <LCD_check_lcd_isbusy>

	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7c9b      	ldrb	r3, [r3, #18]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d837      	bhi.n	80010a4 <LCD_WRITE_COMMAND+0x8a>
		{

			MCAL_GPIO_WriteGroup(LCD_DATA_PORT(LCD), (((command  & 0xF0)>> DATA_shift) * LCD->s_LCDDataPins.DataPinStart), (0x0F * LCD->s_LCDDataPins.DataPinStart));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	b2db      	uxtb	r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	8992      	ldrh	r2, [r2, #12]
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	b299      	uxth	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	899b      	ldrh	r3, [r3, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	f000 fb48 	bl	80016ec <MCAL_GPIO_WriteGroup>
			MCAL_GPIO_WritePIN(LCD_CONTROL_PORT(LCD), LCD->s_LCDCtrlPins.rspin, GPIO_PIN_RESET);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	889b      	ldrh	r3, [r3, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	4619      	mov	r1, r3
 8001068:	f000 fb1b 	bl	80016a2 <MCAL_GPIO_WritePIN>
			LCD_lcd_kick (LCD);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fee3 	bl	8000e38 <LCD_lcd_kick>
			MCAL_GPIO_WriteGroup(LCD_DATA_PORT(LCD),((command & 0x0F) * LCD->s_LCDDataPins.DataPinStart), (0x0F*LCD->s_LCDDataPins.DataPinStart) );
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6898      	ldr	r0, [r3, #8]
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	b29b      	uxth	r3, r3
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	b29b      	uxth	r3, r3
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	8992      	ldrh	r2, [r2, #12]
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	b299      	uxth	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	899b      	ldrh	r3, [r3, #12]
 800108e:	461a      	mov	r2, r3
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	f000 fb28 	bl	80016ec <MCAL_GPIO_WriteGroup>
			WAIT_ms(1);
 800109c:	2001      	movs	r0, #1
 800109e:	f000 fea5 	bl	8001dec <WAIT_ms>
 80010a2:	e00f      	b.n	80010c4 <LCD_WRITE_COMMAND+0xaa>
		}else{				//8bit mode
			MCAL_GPIO_WritePort(LCD_DATA_PORT(LCD) ,command);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	b292      	uxth	r2, r2
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fb0e 	bl	80016d0 <MCAL_GPIO_WritePort>
			MCAL_GPIO_WritePIN(LCD_CONTROL_PORT(LCD) ,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_RESET);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	889b      	ldrh	r3, [r3, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	f000 faef 	bl	80016a2 <MCAL_GPIO_WritePIN>
		}

	LCD_lcd_kick(LCD);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff feb7 	bl	8000e38 <LCD_lcd_kick>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(s_LCD_Config_t* LCD, unsigned char character){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	70fb      	strb	r3, [r7, #3]
	LCD_check_lcd_isbusy(LCD);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff90 	bl	8001004 <LCD_check_lcd_isbusy>
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7c9b      	ldrb	r3, [r3, #18]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d837      	bhi.n	800115c <LCD_WRITE_CHAR+0x8a>
	{
		MCAL_GPIO_WriteGroup(LCD_DATA_PORT(LCD), (((character  & 0xF0)>> DATA_shift) * LCD->s_LCDDataPins.DataPinStart), (0x0F * LCD->s_LCDDataPins.DataPinStart));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	8992      	ldrh	r2, [r2, #12]
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	b299      	uxth	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	899b      	ldrh	r3, [r3, #12]
 8001106:	461a      	mov	r2, r3
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f000 faec 	bl	80016ec <MCAL_GPIO_WriteGroup>
		MCAL_GPIO_WritePIN(LCD_CONTROL_PORT(LCD), LCD->s_LCDCtrlPins.rspin, GPIO_PIN_SET);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	889b      	ldrh	r3, [r3, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	4619      	mov	r1, r3
 8001120:	f000 fabf 	bl	80016a2 <MCAL_GPIO_WritePIN>
		LCD_lcd_kick (LCD);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fe87 	bl	8000e38 <LCD_lcd_kick>
		MCAL_GPIO_WriteGroup(LCD_DATA_PORT(LCD),((character & 0x0F) * LCD->s_LCDDataPins.DataPinStart), (0x0F*LCD->s_LCDDataPins.DataPinStart) );
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6898      	ldr	r0, [r3, #8]
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	b29b      	uxth	r3, r3
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	b29b      	uxth	r3, r3
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	8992      	ldrh	r2, [r2, #12]
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	b299      	uxth	r1, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	899b      	ldrh	r3, [r3, #12]
 8001146:	461a      	mov	r2, r3
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	f000 facc 	bl	80016ec <MCAL_GPIO_WriteGroup>
		WAIT_ms(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fe49 	bl	8001dec <WAIT_ms>
 800115a:	e00f      	b.n	800117c <LCD_WRITE_CHAR+0xaa>
	}else{ 		//8-bit
		MCAL_GPIO_WritePort(LCD_DATA_PORT(LCD), character);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	b292      	uxth	r2, r2
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fab2 	bl	80016d0 <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePIN(LCD_CONTROL_PORT(LCD), LCD->s_LCDCtrlPins.rspin, GPIO_PIN_SET);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	f000 fa93 	bl	80016a2 <MCAL_GPIO_WritePIN>

	}
	LCD_lcd_kick(LCD);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fe5b 	bl	8000e38 <LCD_lcd_kick>


	LCD->Ch_Counter ++;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7cdb      	ldrb	r3, [r3, #19]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	74da      	strb	r2, [r3, #19]
		if(LCD->Ch_Counter==LINE_DIGITS)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7cdb      	ldrb	r3, [r3, #19]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d105      	bne.n	80011a2 <LCD_WRITE_CHAR+0xd0>
			LCD_GOTO_XY(LCD,1,0);
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe68 	bl	8000e70 <LCD_GOTO_XY>
		else if (LCD->Ch_Counter==2*LINE_DIGITS)
			LCD_GOTO_XY(LCD,2,0);
		else if (LCD->Ch_Counter==3*LINE_DIGITS)
			LCD_GOTO_XY(LCD,3,0);
}
 80011a0:	e012      	b.n	80011c8 <LCD_WRITE_CHAR+0xf6>
		else if (LCD->Ch_Counter==2*LINE_DIGITS)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7cdb      	ldrb	r3, [r3, #19]
 80011a6:	2b20      	cmp	r3, #32
 80011a8:	d105      	bne.n	80011b6 <LCD_WRITE_CHAR+0xe4>
			LCD_GOTO_XY(LCD,2,0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2102      	movs	r1, #2
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe5e 	bl	8000e70 <LCD_GOTO_XY>
}
 80011b4:	e008      	b.n	80011c8 <LCD_WRITE_CHAR+0xf6>
		else if (LCD->Ch_Counter==3*LINE_DIGITS)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7cdb      	ldrb	r3, [r3, #19]
 80011ba:	2b30      	cmp	r3, #48	; 0x30
 80011bc:	d104      	bne.n	80011c8 <LCD_WRITE_CHAR+0xf6>
			LCD_GOTO_XY(LCD,3,0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2103      	movs	r1, #3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fe54 	bl	8000e70 <LCD_GOTO_XY>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(s_LCD_Config_t* LCD, char* string){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	int count = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 80011de:	e00a      	b.n	80011f6 <LCD_WRITE_STRING+0x26>
		count++;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(LCD,*string++);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	603a      	str	r2, [r7, #0]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff6e 	bl	80010d2 <LCD_WRITE_CHAR>
	while (*string > 0){
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <LCD_WRITE_STRING+0x10>

	}
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <LCD_WRITE_NUM>:
void LCD_WRITE_NUM(s_LCD_Config_t* LCD, uint32_t number){
 8001208:	b580      	push	{r7, lr}
 800120a:	b098      	sub	sp, #96	; 0x60
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	
	int p, k=0;
 8001212:	2300      	movs	r3, #0
 8001214:	65bb      	str	r3, [r7, #88]	; 0x58
	int num[20];
	
	while(number)
 8001216:	e01c      	b.n	8001252 <LCD_WRITE_NUM+0x4a>
	{
		num[k]=(number%10)+'0';
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <LCD_WRITE_NUM+0x88>)
 800121c:	fba3 2301 	umull	r2, r3, r3, r1
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	1aca      	subs	r2, r1, r3
 800122c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001230:	461a      	mov	r2, r3
 8001232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800123a:	440b      	add	r3, r1
 800123c:	f843 2c58 	str.w	r2, [r3, #-88]
		number /= 10;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <LCD_WRITE_NUM+0x88>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	603b      	str	r3, [r7, #0]
		k++;
 800124c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800124e:	3301      	adds	r3, #1
 8001250:	65bb      	str	r3, [r7, #88]	; 0x58
	while(number)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1df      	bne.n	8001218 <LCD_WRITE_NUM+0x10>
	}
	k--;
 8001258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800125a:	3b01      	subs	r3, #1
 800125c:	65bb      	str	r3, [r7, #88]	; 0x58
	for (p=k;p>=0;p--)
 800125e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001262:	e00e      	b.n	8001282 <LCD_WRITE_NUM+0x7a>
	{
		LCD_WRITE_CHAR(LCD, num[p]);
 8001264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800126c:	4413      	add	r3, r2
 800126e:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff2b 	bl	80010d2 <LCD_WRITE_CHAR>
	for (p=k;p>=0;p--)
 800127c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127e:	3b01      	subs	r3, #1
 8001280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001284:	2b00      	cmp	r3, #0
 8001286:	daed      	bge.n	8001264 <LCD_WRITE_NUM+0x5c>
	}
	
		
}
 8001288:	bf00      	nop
 800128a:	3760      	adds	r7, #96	; 0x60
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	cccccccd 	.word	0xcccccccd

08001294 <EXTI0_IRQHandler>:

//====================
//ISR Functions
//====================

void EXTI0_IRQHandler(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<0 ;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <EXTI0_IRQHandler+0x1c>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <EXTI0_IRQHandler+0x1c>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6153      	str	r3, [r2, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[0]();
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <EXTI0_IRQHandler+0x20>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4798      	blx	r3
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40010400 	.word	0x40010400
 80012b4:	20000110 	.word	0x20000110

080012b8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<1 ;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <EXTI1_IRQHandler+0x1c>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <EXTI1_IRQHandler+0x1c>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6153      	str	r3, [r2, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[1]();
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <EXTI1_IRQHandler+0x20>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4798      	blx	r3
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010400 	.word	0x40010400
 80012d8:	20000110 	.word	0x20000110

080012dc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<2 ;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <EXTI2_IRQHandler+0x1c>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <EXTI2_IRQHandler+0x1c>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6153      	str	r3, [r2, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[2]();
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <EXTI2_IRQHandler+0x20>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4798      	blx	r3
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010400 	.word	0x40010400
 80012fc:	20000110 	.word	0x20000110

08001300 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<3 ;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <EXTI3_IRQHandler+0x1c>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <EXTI3_IRQHandler+0x1c>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6153      	str	r3, [r2, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[3]();
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <EXTI3_IRQHandler+0x20>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4798      	blx	r3
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010400 	.word	0x40010400
 8001320:	20000110 	.word	0x20000110

08001324 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<4 ;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <EXTI4_IRQHandler+0x1c>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <EXTI4_IRQHandler+0x1c>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6153      	str	r3, [r2, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[4]();
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <EXTI4_IRQHandler+0x20>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	4798      	blx	r3
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010400 	.word	0x40010400
 8001344:	20000110 	.word	0x20000110

08001348 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5){
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <EXTI9_5_IRQHandler+0x22>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<5 ;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[5]();
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <EXTI9_5_IRQHandler+0xa4>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<6){
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <EXTI9_5_IRQHandler+0x40>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<6 ;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a1b      	ldr	r2, [pc, #108]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800137c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001380:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[6]();
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <EXTI9_5_IRQHandler+0xa4>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<7){
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <EXTI9_5_IRQHandler+0x5e>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<7 ;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 800139a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139e:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[7]();
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <EXTI9_5_IRQHandler+0xa4>)
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<8){
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <EXTI9_5_IRQHandler+0x7c>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<8 ;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[8]();
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <EXTI9_5_IRQHandler+0xa4>)
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<9){
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <EXTI9_5_IRQHandler+0x9a>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<9 ;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <EXTI9_5_IRQHandler+0xa0>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013da:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[9]();
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <EXTI9_5_IRQHandler+0xa4>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	4798      	blx	r3
	}
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010400 	.word	0x40010400
 80013ec:	20000110 	.word	0x20000110

080013f0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10){
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <EXTI15_10_IRQHandler+0x22>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<10 ;
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	4a29      	ldr	r2, [pc, #164]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[10]();
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <EXTI15_10_IRQHandler+0xc0>)
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<11){
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800141a:	2b00      	cmp	r3, #0
 800141c:	d008      	beq.n	8001430 <EXTI15_10_IRQHandler+0x40>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<11 ;
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a22      	ldr	r2, [pc, #136]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001428:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[11]();
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <EXTI15_10_IRQHandler+0xc0>)
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<12){
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <EXTI15_10_IRQHandler+0x5e>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<12 ;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001442:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001446:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[12]();
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <EXTI15_10_IRQHandler+0xc0>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<13){
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <EXTI15_10_IRQHandler+0x7c>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<13 ;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001464:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[13]();
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <EXTI15_10_IRQHandler+0xc0>)
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<14){
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <EXTI15_10_IRQHandler+0x9a>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<14 ;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001482:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[14]();
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <EXTI15_10_IRQHandler+0xc0>)
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<15){
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <EXTI15_10_IRQHandler+0xb8>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<15 ;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <EXTI15_10_IRQHandler+0xbc>)
 800149c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a0:	6153      	str	r3, [r2, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[15]();
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <EXTI15_10_IRQHandler+0xc0>)
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	4798      	blx	r3
	}
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010400 	.word	0x40010400
 80014b0:	20000110 	.word	0x20000110

080014b4 <Get_CRLH_Position>:

#include "STM32F103x6_GPIO_Driver.h"

//assisted functions
uint8_t Get_CRLH_Position(uint16_t PINNumber)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	switch (PINNumber)
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	2b80      	cmp	r3, #128	; 0x80
 80014c2:	d042      	beq.n	800154a <Get_CRLH_Position+0x96>
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	dc11      	bgt.n	80014ec <Get_CRLH_Position+0x38>
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d036      	beq.n	800153a <Get_CRLH_Position+0x86>
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	dc06      	bgt.n	80014de <Get_CRLH_Position+0x2a>
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d02e      	beq.n	8001532 <Get_CRLH_Position+0x7e>
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d02e      	beq.n	8001536 <Get_CRLH_Position+0x82>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d028      	beq.n	800152e <Get_CRLH_Position+0x7a>
 80014dc:	e047      	b.n	800156e <Get_CRLH_Position+0xba>
 80014de:	2b20      	cmp	r3, #32
 80014e0:	d02f      	beq.n	8001542 <Get_CRLH_Position+0x8e>
 80014e2:	2b40      	cmp	r3, #64	; 0x40
 80014e4:	d02f      	beq.n	8001546 <Get_CRLH_Position+0x92>
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d029      	beq.n	800153e <Get_CRLH_Position+0x8a>
 80014ea:	e040      	b.n	800156e <Get_CRLH_Position+0xba>
 80014ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f0:	d033      	beq.n	800155a <Get_CRLH_Position+0xa6>
 80014f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f6:	dc09      	bgt.n	800150c <Get_CRLH_Position+0x58>
 80014f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fc:	d029      	beq.n	8001552 <Get_CRLH_Position+0x9e>
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d028      	beq.n	8001556 <Get_CRLH_Position+0xa2>
 8001504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001508:	d021      	beq.n	800154e <Get_CRLH_Position+0x9a>
 800150a:	e030      	b.n	800156e <Get_CRLH_Position+0xba>
 800150c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001510:	d027      	beq.n	8001562 <Get_CRLH_Position+0xae>
 8001512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001516:	dc03      	bgt.n	8001520 <Get_CRLH_Position+0x6c>
 8001518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151c:	d01f      	beq.n	800155e <Get_CRLH_Position+0xaa>
 800151e:	e026      	b.n	800156e <Get_CRLH_Position+0xba>
 8001520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001524:	d01f      	beq.n	8001566 <Get_CRLH_Position+0xb2>
 8001526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152a:	d01e      	beq.n	800156a <Get_CRLH_Position+0xb6>
 800152c:	e01f      	b.n	800156e <Get_CRLH_Position+0xba>
	{
	//CRL
	case GPIO_PIN0:
		return 0;
 800152e:	2300      	movs	r3, #0
 8001530:	e01e      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8001532:	2304      	movs	r3, #4
 8001534:	e01c      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8001536:	2308      	movs	r3, #8
 8001538:	e01a      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 800153a:	230c      	movs	r3, #12
 800153c:	e018      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 800153e:	2310      	movs	r3, #16
 8001540:	e016      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8001542:	2314      	movs	r3, #20
 8001544:	e014      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8001546:	2318      	movs	r3, #24
 8001548:	e012      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 800154a:	231c      	movs	r3, #28
 800154c:	e010      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;

	//CRH
	case GPIO_PIN8:
		return 0;
 800154e:	2300      	movs	r3, #0
 8001550:	e00e      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8001552:	2304      	movs	r3, #4
 8001554:	e00c      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8001556:	2308      	movs	r3, #8
 8001558:	e00a      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 800155a:	230c      	movs	r3, #12
 800155c:	e008      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 800155e:	2310      	movs	r3, #16
 8001560:	e006      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8001562:	2314      	movs	r3, #20
 8001564:	e004      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8001566:	2318      	movs	r3, #24
 8001568:	e002      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 800156a:	231c      	movs	r3, #28
 800156c:	e000      	b.n	8001570 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <MCAL_GPIO_init>:
 * 				 the configuration info for specified GPIO
* @retval -
* Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig){
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]

	volatile uint32_t *Config_Reg = NULL;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
	uint8_t PIN = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

	//Port configuration Register low (GPIOx_CRL) configure pins 0 -> 7
	//Port configuration Register high (GPIOx_CRH)  configure pins 8 -> 15
	Config_Reg = (PINConfig->GPIO_PINNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d801      	bhi.n	8001598 <MCAL_GPIO_init+0x1e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	e001      	b.n	800159c <MCAL_GPIO_init+0x22>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] & MODE[1:0]
	(*Config_Reg) &= ~(0x0F << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff86 	bl	80014b4 <Get_CRLH_Position>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	230f      	movs	r3, #15
 80015ae:	4093      	lsls	r3, r2
 80015b0:	43da      	mvns	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	401a      	ands	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	601a      	str	r2, [r3, #0]
	// GPIO PIN mode is output
	if ((PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	d00b      	beq.n	80015dc <MCAL_GPIO_init+0x62>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	789b      	ldrb	r3, [r3, #2]
 80015c8:	2b06      	cmp	r3, #6
 80015ca:	d007      	beq.n	80015dc <MCAL_GPIO_init+0x62>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	789b      	ldrb	r3, [r3, #2]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d003      	beq.n	80015dc <MCAL_GPIO_init+0x62>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	789b      	ldrb	r3, [r3, #2]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d10e      	bne.n	80015fa <MCAL_GPIO_init+0x80>
	{
		PIN = (((PINConfig -> GPIO_Mode - 4 )<< 2 ) | (PINConfig -> GPIO_Speed )) & 0x0F;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	3b04      	subs	r3, #4
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	b25a      	sxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	78db      	ldrb	r3, [r3, #3]
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e02a      	b.n	8001650 <MCAL_GPIO_init+0xd6>
	}

	else {
		//GPIO PIN Mode is input / Analog
		if ((PINConfig->GPIO_Mode == GPIO_Mode_IN_Float) ||  (PINConfig->GPIO_Mode == GPIO_Mode_Analog))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	789b      	ldrb	r3, [r3, #2]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d003      	beq.n	800160a <MCAL_GPIO_init+0x90>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d107      	bne.n	800161a <MCAL_GPIO_init+0xa0>
			{
				PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e01a      	b.n	8001650 <MCAL_GPIO_init+0xd6>
			}
		else{
			PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	73fb      	strb	r3, [r7, #15]

			if (PINConfig -> GPIO_Mode == GPIO_Mode_IN_PU ){
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	789b      	ldrb	r3, [r3, #2]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d107      	bne.n	8001640 <MCAL_GPIO_init+0xc6>
				//ODR = 1 INPUT Pull Up
				GPIOx -> ODR.Reg |= PINConfig -> GPIO_PINNumber;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e007      	b.n	8001650 <MCAL_GPIO_init+0xd6>
			}
			else{
				//ODR = 0 INPUT Pull Down
				GPIOx -> ODR.Reg &= ~(PINConfig -> GPIO_PINNumber);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	8812      	ldrh	r2, [r2, #0]
 8001648:	43d2      	mvns	r2, r2
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on CRL or CRH
	(*Config_Reg) |= (PIN << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 8001650:	7bfc      	ldrb	r4, [r7, #15]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff2c 	bl	80014b4 <Get_CRLH_Position>
 800165c:	4603      	mov	r3, r0
 800165e:	fa04 f203 	lsl.w	r2, r4, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	431a      	orrs	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}

08001674 <MCAL_GPIO_ReadPIN>:
 * @param [in] 	-PinNumber : set pin number to read
 * @retval	 	-The Reading value of the input pin
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
	uint8_t BitStatus;
	if (( GPIOx->IDR.Reg & PIN_Number) != (uint32_t)GPIO_PIN_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <MCAL_GPIO_ReadPIN+0x1e>
	{
		BitStatus = GPIO_PIN_SET ;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e001      	b.n	8001696 <MCAL_GPIO_ReadPIN+0x22>
	}else
	{
		BitStatus = GPIO_PIN_RESET ;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
	}

	return BitStatus ;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <MCAL_GPIO_WritePIN>:
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number,uint8_t value )
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	807b      	strh	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_SET )
 80016b2:	787b      	ldrb	r3, [r7, #1]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d003      	beq.n	80016c0 <MCAL_GPIO_WritePIN+0x1e>
		{
		//Port bit set/reset Register (GPIOx_BSRR)
		//BRy: Port x Reset bit y (y= 0 ... 15)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx -> BRR = (uint32_t) PIN_Number ;
 80016b8:	887a      	ldrh	r2, [r7, #2]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	615a      	str	r2, [r3, #20]
		// Port bit set/reset Register (GPIOx_BSRR)
		// BSy: Port x Reset bit y (y= 0 ... 15)
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		GPIOx -> BSRR = (uint32_t) PIN_Number ;
}
 80016be:	e002      	b.n	80016c6 <MCAL_GPIO_WritePIN+0x24>
		GPIOx -> BSRR = (uint32_t) PIN_Number ;
 80016c0:	887a      	ldrh	r2, [r7, #2]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <MCAL_GPIO_WritePort>:
 * @param [in]	-Value : PORT value
 * @retval 		-None
 * Note 		-None
 */

void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint16_t value ){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR.Reg = (uint32_t) value;
 80016dc:	887a      	ldrh	r2, [r7, #2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <MCAL_GPIO_WriteGroup>:
 * @retval 		-None
 * Note 		-None
 */

void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx,uint16_t Value,uint16_t Mask)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	803b      	strh	r3, [r7, #0]
	GPIOx->ODR.Reg &= ~(Mask);				// clear the group value
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	883a      	ldrh	r2, [r7, #0]
 8001702:	43d2      	mvns	r2, r2
 8001704:	401a      	ands	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60da      	str	r2, [r3, #12]
	GPIOx->ODR.Reg |= (Value & Mask);		// put the new group value
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	8879      	ldrh	r1, [r7, #2]
 8001710:	883a      	ldrh	r2, [r7, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	b292      	uxth	r2, r2
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <MCAL_RCC_GetSYS_CLCKFreq>:

/**================================================================
* @Fn- 		MCAL_RCC_GetSYS_CLCKFreq
* @brief 	-drive the system clock (SYSCLK)
*/
uint32_t MCAL_RCC_GetSYS_CLCKFreq(void){
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
//Set and cleared by hardware to indicate which clock source is used as system clock.
//00: HSI oscillator used as system clock
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: Not applicable
	switch (RCC->CFGR >>2 & 0b11)
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d006      	beq.n	8001748 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d302      	bcc.n	8001744 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 800173e:	2b02      	cmp	r3, #2
 8001740:	d004      	beq.n	800174c <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8001742:	e005      	b.n	8001750 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8001746:	e003      	b.n	8001750 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	case 1:
		return HSE_Clock;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800174a:	e001      	b.n	8001750 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	case 2:
		return 16000000;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 800174e:	e7ff      	b.n	8001750 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}

}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	007a1200 	.word	0x007a1200
 8001760:	00f42400 	.word	0x00f42400

08001764 <MCAL_RCC_GetHCLCKFreq>:

/**================================================================
 * @Fn			-MCAL_RCC_GetHCLCKFreq
 * @brief 		-Get HCLK source
 */
uint32_t MCAL_RCC_GetHCLCKFreq(void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetSYS_CLCKFreq()>> AHBPrescTable [(RCC->CFGR >>4)& 0xF]);
 8001768:	f7ff ffde 	bl	8001728 <MCAL_RCC_GetSYS_CLCKFreq>
 800176c:	4601      	mov	r1, r0
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <MCAL_RCC_GetHCLCKFreq+0x20>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <MCAL_RCC_GetHCLCKFreq+0x24>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	08002a38 	.word	0x08002a38

0800178c <MCAL_RCC_GetPCLCK1Freq>:
/**================================================================
 * @Fn			-MCAL_RCC_GetPCLCK1Freq
 * @brief 		-compute PCLK1 frequency
 */
uint32_t MCAL_RCC_GetPCLCK1Freq(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLCKFreq()>> APBPrescTable[(RCC->CFGR >>8)& 0b111]);
 8001790:	f7ff ffe8 	bl	8001764 <MCAL_RCC_GetHCLCKFreq>
 8001794:	4601      	mov	r1, r0
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <MCAL_RCC_GetPCLCK1Freq+0x20>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <MCAL_RCC_GetPCLCK1Freq+0x24>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	08002a30 	.word	0x08002a30

080017b4 <MCAL_RCC_GetPCLCK2Freq>:
/**================================================================
 * @Fn			-MCAL_RCC_GetPCLCK2Freq
 * @brief 		-compute PCLK2 frequency
 */
uint32_t MCAL_RCC_GetPCLCK2Freq(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLCKFreq()>> APBPrescTable [(RCC->CFGR >>11)& 0b111]);
 80017b8:	f7ff ffd4 	bl	8001764 <MCAL_RCC_GetHCLCKFreq>
 80017bc:	4601      	mov	r1, r0
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <MCAL_RCC_GetPCLCK2Freq+0x20>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0adb      	lsrs	r3, r3, #11
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <MCAL_RCC_GetPCLCK2Freq+0x24>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08002a30 	.word	0x08002a30

080017dc <SPI1_IRQHandler>:
	}
}

//ISR
void SPI1_IRQHandler (void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	struct SPI_IRQ_Src irq_src;
	irq_src.SPI_TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <SPI1_IRQHandler+0x54>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	085b      	lsrs	r3, r3, #1
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	793b      	ldrb	r3, [r7, #4]
 80017f0:	f362 0300 	bfi	r3, r2, #0, #1
 80017f4:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <SPI1_IRQHandler+0x54>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	793b      	ldrb	r3, [r7, #4]
 8001802:	f362 0341 	bfi	r3, r2, #1, #1
 8001806:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <SPI1_IRQHandler+0x54>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	793b      	ldrb	r3, [r7, #4]
 8001816:	f362 0382 	bfi	r3, r2, #2, #1
 800181a:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SPI1_IRQHandler+0x58>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	7938      	ldrb	r0, [r7, #4]
 8001824:	4798      	blx	r3
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40013000 	.word	0x40013000
 8001834:	200000f4 	.word	0x200000f4

08001838 <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	struct SPI_IRQ_Src irq_src;
	irq_src.SPI_TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <SPI2_IRQHandler+0x54>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	793b      	ldrb	r3, [r7, #4]
 800184c:	f362 0300 	bfi	r3, r2, #0, #1
 8001850:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <SPI2_IRQHandler+0x54>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	793b      	ldrb	r3, [r7, #4]
 800185e:	f362 0341 	bfi	r3, r2, #1, #1
 8001862:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <SPI2_IRQHandler+0x54>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	793b      	ldrb	r3, [r7, #4]
 8001872:	f362 0382 	bfi	r3, r2, #2, #1
 8001876:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SPI2_IRQHandler+0x58>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	7938      	ldrb	r0, [r7, #4]
 8001880:	4798      	blx	r3
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40003800 	.word	0x40003800
 8001890:	200000f4 	.word	0x200000f4

08001894 <Get_USART_Index>:
USART_Config_t* Global_USART_Config[3] = {NULL, NULL, NULL};
//void (*GP_IRQ_CallBack)(void);

//===============APIs===================//
//*********Global Functions*********//
uint8_t Get_USART_Index(USART_TypeDef* USARTx){
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

	if(USARTx == USART1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <Get_USART_Index+0x38>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <Get_USART_Index+0x14>
		return USART1_INDEX;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e00b      	b.n	80018c0 <Get_USART_Index+0x2c>
	else if(USARTx == USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <Get_USART_Index+0x3c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <Get_USART_Index+0x20>
		return USART2_INDEX;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e005      	b.n	80018c0 <Get_USART_Index+0x2c>
	else if(USARTx == USART3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <Get_USART_Index+0x40>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <Get_USART_Index+0x2c>
		return USART3_INDEX;
 80018bc:	2302      	movs	r3, #2
 80018be:	e7ff      	b.n	80018c0 <Get_USART_Index+0x2c>

}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40004800 	.word	0x40004800

080018d8 <MCAL_USART_init>:
* @retval -
* Note			-STM32F103C6 MCU has USART A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/

void  MCAL_USART_init (USART_TypeDef* USARTx ,USART_Config_t* USART_Config){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]

	uint32_t Pclk, BRReg;
	//enable USART clock
	if (USARTx == USART1){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a43      	ldr	r2, [pc, #268]	; (80019f4 <MCAL_USART_init+0x11c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d109      	bne.n	80018fe <MCAL_USART_init+0x26>
		RCC_USART1_CLOCK_EN();
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <MCAL_USART_init+0x120>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <MCAL_USART_init+0x120>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6193      	str	r3, [r2, #24]
		Global_USART_Config[USART1_INDEX] = USART_Config;
 80018f6:	4a41      	ldr	r2, [pc, #260]	; (80019fc <MCAL_USART_init+0x124>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e01a      	b.n	8001934 <MCAL_USART_init+0x5c>
	}
	else if (USARTx == USART2){
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a3f      	ldr	r2, [pc, #252]	; (8001a00 <MCAL_USART_init+0x128>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d109      	bne.n	800191a <MCAL_USART_init+0x42>
		RCC_USART2_CLOCK_EN();
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <MCAL_USART_init+0x120>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <MCAL_USART_init+0x120>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[USART2_INDEX] = USART_Config;
 8001912:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <MCAL_USART_init+0x124>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6053      	str	r3, [r2, #4]
 8001918:	e00c      	b.n	8001934 <MCAL_USART_init+0x5c>
	}
	else if (USARTx == USART3){
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <MCAL_USART_init+0x12c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d108      	bne.n	8001934 <MCAL_USART_init+0x5c>
		RCC_USART3_CLOCK_EN();
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <MCAL_USART_init+0x120>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a34      	ldr	r2, [pc, #208]	; (80019f8 <MCAL_USART_init+0x120>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[USART3_INDEX] = USART_Config;
 800192e:	4a33      	ldr	r2, [pc, #204]	; (80019fc <MCAL_USART_init+0x124>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	6093      	str	r3, [r2, #8]
	}
	//enable USART Module
	//Bit 13 UE: USART enable
	//When this bit is cleared the USART prescalers and outputs are stopped
	USARTx -> CR1 |= 1<<13 ;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
	//enable USART send and receive
	//Bit 3 TE: Transmitter enable
	//Bit 2 RE: Receiver enable
	USARTx->CR1 |= USART_Config->USART_Mode;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60da      	str	r2, [r3, #12]

	//select number of Stop Bits
	USARTx->CR1 |= USART_Config->StopBits;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	7a92      	ldrb	r2, [r2, #10]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
	//enable or disable HW flow control modes
	USARTx->CR1 |= USART_Config->HWFlowCTRL;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	7ad2      	ldrb	r2, [r2, #11]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60da      	str	r2, [r3, #12]

	//configure USART communication baud rate
	if (USARTx == USART1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <MCAL_USART_init+0x11c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d103      	bne.n	800197a <MCAL_USART_init+0xa2>
		Pclk = MCAL_RCC_GetPCLCK2Freq();
 8001972:	f7ff ff1f 	bl	80017b4 <MCAL_RCC_GetPCLCK2Freq>
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	e002      	b.n	8001980 <MCAL_USART_init+0xa8>
	else
		Pclk = MCAL_RCC_GetPCLCK1Freq();
 800197a:	f7ff ff07 	bl	800178c <MCAL_RCC_GetPCLCK1Freq>
 800197e:	60f8      	str	r0, [r7, #12]
	BRReg = USART_BRR_Register(Pclk,USART_Config->BaudRate);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRReg;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	609a      	str	r2, [r3, #8]

	//enable NVIC for USART IRQ
	if(USART_Config -> IRQ_Enable != USART_IRQ_Enable_NONE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	7b1b      	ldrb	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d026      	beq.n	80019ec <MCAL_USART_init+0x114>
	{

		USARTx->CR1 |= USART_Config->IRQ_Enable;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	7b12      	ldrb	r2, [r2, #12]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]

		if (USARTx == USART1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <MCAL_USART_init+0x11c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d106      	bne.n	80019c2 <MCAL_USART_init+0xea>
			NVIC_IRQ37_USART1_ENABLE();
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MCAL_USART_init+0x130>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <MCAL_USART_init+0x130>)
 80019ba:	f043 0320 	orr.w	r3, r3, #32
 80019be:	6013      	str	r3, [r2, #0]
		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_ENABLE();

	}

}
 80019c0:	e014      	b.n	80019ec <MCAL_USART_init+0x114>
		else if (USARTx == USART2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <MCAL_USART_init+0x128>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d106      	bne.n	80019d8 <MCAL_USART_init+0x100>
			NVIC_IRQ38_USART2_ENABLE();
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MCAL_USART_init+0x130>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <MCAL_USART_init+0x130>)
 80019d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	e009      	b.n	80019ec <MCAL_USART_init+0x114>
		else if (USARTx == USART3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <MCAL_USART_init+0x12c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d105      	bne.n	80019ec <MCAL_USART_init+0x114>
			NVIC_IRQ39_USART3_ENABLE();
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MCAL_USART_init+0x130>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <MCAL_USART_init+0x130>)
 80019e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40021000 	.word	0x40021000
 80019fc:	200000fc 	.word	0x200000fc
 8001a00:	40004400 	.word	0x40004400
 8001a04:	40004800 	.word	0x40004800
 8001a08:	e000e104 	.word	0xe000e104

08001a0c <MCAL_USART_SendData>:
	}

}

void  MCAL_USART_SendData (USART_TypeDef *USARTx, char *pTxBuffer,enum Polling_Mechanism PollingEn)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	4613      	mov	r3, r2
 8001a18:	71fb      	strb	r3, [r7, #7]
	uint8_t USART_Index = Get_USART_Index(USARTx);
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff ff3a 	bl	8001894 <Get_USART_Index>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
	//Bit 7 TXE: Transmit data register empty
	//wait until TXE flag is set
	if (PollingEn == Polling_Enable)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d106      	bne.n	8001a38 <MCAL_USART_SendData+0x2c>
		while(!(USARTx->SR & 1 << 7));
 8001a2a:	bf00      	nop
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f9      	beq.n	8001a2c <MCAL_USART_SendData+0x20>
	{
		USARTx-> DR = (*pTxBuffer&(uint16_t) 0x01FF);
	}else
	{
		// USART_Payload_Length_8B
		USARTx-> DR = (*pTxBuffer&(uint8_t) 0xFF);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	605a      	str	r2, [r3, #4]
	}
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <MCAL_USART_ReceiveChar>:

void  MCAL_USART_ReceiveChar (USART_TypeDef *USARTx,char* RxChar,enum Polling_Mechanism PollingEn)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	71fb      	strb	r3, [r7, #7]
	uint8_t USART_Index = Get_USART_Index(USARTx);
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff1a 	bl	8001894 <Get_USART_Index>
 8001a60:	4603      	mov	r3, r0
 8001a62:	75fb      	strb	r3, [r7, #23]
	//Bit 5 RXE:  Read data register not empty
	//wait until RXNE flag is set : Received data is ready to be read.
	if (PollingEn == Polling_Enable)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d106      	bne.n	8001a78 <MCAL_USART_ReceiveChar+0x2c>
		while(!(USARTx->SR & 1 << 5));
 8001a6a:	bf00      	nop
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f9      	beq.n	8001a6c <MCAL_USART_ReceiveChar+0x20>
		}

	}else
	{
		//this is 8bit data
		if (Global_USART_Config[USART_Index]->Parity == USART_NONE_Parity )
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	; (8001aac <MCAL_USART_ReceiveChar+0x60>)
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	7a5b      	ldrb	r3, [r3, #9]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <MCAL_USART_ReceiveChar+0x46>
		{
			*((char*)RxChar) = (USARTx-> DR & (uint8_t)0xFF);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	701a      	strb	r2, [r3, #0]
		{
			//parity is used, 7 bits are only the data bits
			*((char*)RxChar) = (USARTx-> DR & (uint8_t)0x7F);
		}
	}
}
 8001a90:	e007      	b.n	8001aa2 <MCAL_USART_ReceiveChar+0x56>
			*((char*)RxChar) = (USARTx-> DR & (uint8_t)0x7F);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	701a      	strb	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000fc 	.word	0x200000fc

08001ab0 <MCAL_USART_ReceiveNum>:
	data[i] = '\0';
	pRxBuffer = data;
}

void  MCAL_USART_ReceiveNum(USART_TypeDef *USARTx,uint16_t* RxNum, uint8_t Num_len)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	71fb      	strb	r3, [r7, #7]
	char get_char ;
	uint16_t Temp_RxNum;
	int Num_Digit = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
	MCAL_USART_ReceiveChar(USARTx, &get_char, Polling_Disable);
 8001ac2:	f107 0317 	add.w	r3, r7, #23
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff ffbe 	bl	8001a4c <MCAL_USART_ReceiveChar>
	MCAL_USART_SendData(USARTx, &get_char,Polling_Enable );
 8001ad0:	f107 0317 	add.w	r3, r7, #23
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff ff97 	bl	8001a0c <MCAL_USART_SendData>
	while(log10(Temp_RxNum)+1 < Num_len) {
 8001ade:	e047      	b.n	8001b70 <MCAL_USART_ReceiveNum+0xc0>
		get_char -= 112;
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	3b70      	subs	r3, #112	; 0x70
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	75fb      	strb	r3, [r7, #23]
		if(get_char<=9 && get_char>=0){
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	d80f      	bhi.n	8001b0e <MCAL_USART_ReceiveNum+0x5e>
			Temp_RxNum =  Temp_RxNum*Num_Digit+(get_char);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8bfa      	ldrh	r2, [r7, #30]
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	83fb      	strh	r3, [r7, #30]
			 Num_Digit *= 10;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
		}

	if(log10(Temp_RxNum)+1 < Num_len){
 8001b0e:	8bfb      	ldrh	r3, [r7, #30]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fc6f 	bl	80003f4 <__aeabi_ui2d>
 8001b16:	4603      	mov	r3, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	f000 fc5d 	bl	80023dc <log10>
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MCAL_USART_ReceiveNum+0x108>)
 8001b28:	f7fe fb28 	bl	800017c <__adddf3>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4625      	mov	r5, r4
 8001b32:	461c      	mov	r4, r3
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fc6c 	bl	8000414 <__aeabi_i2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe ff42 	bl	80009cc <__aeabi_dcmplt>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <MCAL_USART_ReceiveNum+0xba>
		MCAL_USART_ReceiveChar(USARTx, &get_char, Polling_Enable);
 8001b4e:	f107 0317 	add.w	r3, r7, #23
 8001b52:	2201      	movs	r2, #1
 8001b54:	4619      	mov	r1, r3
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff ff78 	bl	8001a4c <MCAL_USART_ReceiveChar>
		MCAL_USART_SendData(USART1, &get_char,Polling_Enable );
 8001b5c:	f107 0317 	add.w	r3, r7, #23
 8001b60:	2201      	movs	r2, #1
 8001b62:	4619      	mov	r1, r3
 8001b64:	4815      	ldr	r0, [pc, #84]	; (8001bbc <MCAL_USART_ReceiveNum+0x10c>)
 8001b66:	f7ff ff51 	bl	8001a0c <MCAL_USART_SendData>

	}
	* RxNum = Temp_RxNum;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	8bfa      	ldrh	r2, [r7, #30]
 8001b6e:	801a      	strh	r2, [r3, #0]
	while(log10(Temp_RxNum)+1 < Num_len) {
 8001b70:	8bfb      	ldrh	r3, [r7, #30]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc3e 	bl	80003f4 <__aeabi_ui2d>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460c      	mov	r4, r1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	4621      	mov	r1, r4
 8001b80:	f000 fc2c 	bl	80023dc <log10>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MCAL_USART_ReceiveNum+0x108>)
 8001b8a:	f7fe faf7 	bl	800017c <__adddf3>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460c      	mov	r4, r1
 8001b92:	4625      	mov	r5, r4
 8001b94:	461c      	mov	r4, r3
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fc3b 	bl	8000414 <__aeabi_i2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe ff11 	bl	80009cc <__aeabi_dcmplt>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d197      	bne.n	8001ae0 <MCAL_USART_ReceiveNum+0x30>
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb8:	3ff00000 	.word	0x3ff00000
 8001bbc:	40013800 	.word	0x40013800

08001bc0 <USART1_IRQHandler>:
	}
}

//ISR
void USART1_IRQHandler (void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//received data ready to be read
	if (USART1->SR & 1<<5){
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <USART1_IRQHandler+0x74>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <USART1_IRQHandler+0x18>
		flag = USART_IRQ_RXNE;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	71fb      	strb	r3, [r7, #7]
 8001bd6:	e022      	b.n	8001c1e <USART1_IRQHandler+0x5e>
	}
	//Transmission complete
	else if (USART1->SR & 1<<6){
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <USART1_IRQHandler+0x74>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <USART1_IRQHandler+0x2a>
		flag = USART_IRQ_TC;
 8001be4:	2301      	movs	r3, #1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	e019      	b.n	8001c1e <USART1_IRQHandler+0x5e>
	}
	//transmit data register empty
	else if (USART1->SR & 1<<7){
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <USART1_IRQHandler+0x74>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <USART1_IRQHandler+0x3c>
		flag = USART_IRQ_TXE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	e010      	b.n	8001c1e <USART1_IRQHandler+0x5e>
	}
	//overrun error detected
	else if (USART1->SR & 1<<3){
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <USART1_IRQHandler+0x74>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <USART1_IRQHandler+0x4e>
		flag = USART_IRQ_ORE;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	e007      	b.n	8001c1e <USART1_IRQHandler+0x5e>
	}
	//Parity error
	else if (USART1->SR & 1<<0){
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <USART1_IRQHandler+0x74>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <USART1_IRQHandler+0x5e>
		flag = USART_IRQ_PE;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	71fb      	strb	r3, [r7, #7]
	}

	Global_USART_Config[USART1_INDEX]->P_IRQ_CallBack(flag);
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <USART1_IRQHandler+0x78>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	79fa      	ldrb	r2, [r7, #7]
 8001c26:	4610      	mov	r0, r2
 8001c28:	4798      	blx	r3

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40013800 	.word	0x40013800
 8001c38:	200000fc 	.word	0x200000fc

08001c3c <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART2->SR & 1<<7)
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <USART2_IRQHandler+0x74>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <USART2_IRQHandler+0x18>
		flag = USART_IRQ_TXE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	e022      	b.n	8001c9a <USART2_IRQHandler+0x5e>
	//Transmission complete
	else if (USART2->SR & 1<<6){
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <USART2_IRQHandler+0x74>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <USART2_IRQHandler+0x2a>
		flag = USART_IRQ_TC;
 8001c60:	2301      	movs	r3, #1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	e019      	b.n	8001c9a <USART2_IRQHandler+0x5e>
	}
	//received data ready to be read
	else if (USART2->SR & 1<<5){
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <USART2_IRQHandler+0x74>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <USART2_IRQHandler+0x3c>
		flag = USART_IRQ_RXNE;
 8001c72:	2302      	movs	r3, #2
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e010      	b.n	8001c9a <USART2_IRQHandler+0x5e>
	}
	//overrun error detected
	else if (USART2->SR & 1<<3){
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <USART2_IRQHandler+0x74>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <USART2_IRQHandler+0x4e>
		flag = USART_IRQ_ORE;
 8001c84:	2303      	movs	r3, #3
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	e007      	b.n	8001c9a <USART2_IRQHandler+0x5e>
	}
	//Parity error
	else if (USART2->SR & 1<<0){
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <USART2_IRQHandler+0x74>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <USART2_IRQHandler+0x5e>
		flag = USART_IRQ_PE;
 8001c96:	2304      	movs	r3, #4
 8001c98:	71fb      	strb	r3, [r7, #7]
	}
	Global_USART_Config[USART2_INDEX]->P_IRQ_CallBack(flag);
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <USART2_IRQHandler+0x78>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	79fa      	ldrb	r2, [r7, #7]
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4798      	blx	r3

}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40004400 	.word	0x40004400
 8001cb4:	200000fc 	.word	0x200000fc

08001cb8 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART3->SR &1<<7)
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <USART3_IRQHandler+0x18>
		flag = USART_IRQ_TXE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	e02a      	b.n	8001d26 <USART3_IRQHandler+0x6e>
	//Transmission complete
	else if (USART3->SR & 1<<6){
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <USART3_IRQHandler+0x32>
		flag = USART_IRQ_TC;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	71fb      	strb	r3, [r7, #7]
		USART3 -> SR = ~(1<<6);
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e01d      	b.n	8001d26 <USART3_IRQHandler+0x6e>
	}
	//received data ready to be read
	else if (USART3->SR & 1<<5){
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <USART3_IRQHandler+0x4c>
		flag = USART_IRQ_RXNE;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	71fb      	strb	r3, [r7, #7]
		USART3 -> SR = ~(1<<5);
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001cfc:	f06f 0220 	mvn.w	r2, #32
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e010      	b.n	8001d26 <USART3_IRQHandler+0x6e>
	}
	//overrun error detected
	else if (USART3->SR & 1<<3){
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <USART3_IRQHandler+0x5e>
		flag = USART_IRQ_ORE;
 8001d10:	2303      	movs	r3, #3
 8001d12:	71fb      	strb	r3, [r7, #7]
 8001d14:	e007      	b.n	8001d26 <USART3_IRQHandler+0x6e>
	}
	//Parity error
	else if (USART3->SR & 1<<0){
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <USART3_IRQHandler+0x84>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <USART3_IRQHandler+0x6e>
		flag = USART_IRQ_PE;
 8001d22:	2304      	movs	r3, #4
 8001d24:	71fb      	strb	r3, [r7, #7]
	}

	Global_USART_Config[USART3_INDEX]->P_IRQ_CallBack(flag);
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <USART3_IRQHandler+0x88>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	79fa      	ldrb	r2, [r7, #7]
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4798      	blx	r3

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40004800 	.word	0x40004800
 8001d40:	200000fc 	.word	0x200000fc

08001d44 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	RCC_TIMER2_CLOCK_EN();     //Enable Rcc for tim2
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <Timer2_init+0x40>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <Timer2_init+0x40>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	61d3      	str	r3, [r2, #28]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <Timer2_init+0x44>)
 8001d56:	2207      	movs	r2, #7
 8001d58:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <Timer2_init+0x48>)
 8001d5c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d60:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 8001d62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 8001d72:	bf00      	nop
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <Timer2_init+0x4c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0fb      	beq.n	8001d74 <Timer2_init+0x30>
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40000028 	.word	0x40000028
 8001d8c:	4000002c 	.word	0x4000002c
 8001d90:	40000010 	.word	0x40000010

08001d94 <Timer_dus>:

void Timer_dus(int us)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <Timer_dus+0x24>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 8001da2:	bf00      	nop
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <Timer_dus+0x24>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3fa      	bcc.n	8001da4 <Timer_dus+0x10>
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40000024 	.word	0x40000024

08001dbc <Timer_dms>:

void Timer_dms(int ms)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	int i=0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e006      	b.n	8001ddc <Timer_dms+0x20>
	{
		Timer_dus(1000);
 8001dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd2:	f7ff ffdf 	bl	8001d94 <Timer_dus>
	for(i=0;i<ms;i++)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbf4      	blt.n	8001dce <Timer_dms+0x12>
	}
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <WAIT_ms>:
unsigned char Available_Slots= 3;
uint8_t Search_Done = 0;

/*=================Global Functions===============*/

void WAIT_ms(uint32_t t){
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<t;i++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e00b      	b.n	8001e12 <WAIT_ms+0x26>
		for(j=0;j<255;j++);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	e002      	b.n	8001e06 <WAIT_ms+0x1a>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2bfe      	cmp	r3, #254	; 0xfe
 8001e0a:	d9f9      	bls.n	8001e00 <WAIT_ms+0x14>
	for(i=0;i<t;i++){
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3ef      	bcc.n	8001dfa <WAIT_ms+0xe>
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <Clock_Init>:
								USART_IRQ_Enable_RXNE,
								RFID_CARD_EXIT_CallBack};



void Clock_Init(void){
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_EN();
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <Clock_Init+0x30>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <Clock_Init+0x30>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_EN();
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <Clock_Init+0x30>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <Clock_Init+0x30>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLOCK_EN();
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <Clock_Init+0x30>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <Clock_Init+0x30>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6193      	str	r3, [r2, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000

08001e58 <main>:

int main(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	Clock_Init();
 8001e5e:	f7ff ffe1 	bl	8001e24 <Clock_Init>
	Keypad_init();
 8001e62:	f7fe fe81 	bl	8000b68 <Keypad_init>
	Timer2_init();
 8001e66:	f7ff ff6d 	bl	8001d44 <Timer2_init>
	Servo1_Entry_Gate_Init();
 8001e6a:	f7fe fded 	bl	8000a48 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 8001e6e:	f7fe fe33 	bl	8000ad8 <Servo2_Exit_Gate_Init>


	//==========================Connected Hardware INIT=============================
	LCD_INIT(&LCD);
 8001e72:	487f      	ldr	r0, [pc, #508]	; (8002070 <main+0x218>)
 8001e74:	f7ff f896 	bl	8000fa4 <LCD_INIT>
	LCD_INIT(&LCD2);
 8001e78:	487e      	ldr	r0, [pc, #504]	; (8002074 <main+0x21c>)
 8001e7a:	f7ff f893 	bl	8000fa4 <LCD_INIT>
	LEDs_Init();
 8001e7e:	f000 f9a1 	bl	80021c4 <LEDs_Init>
	PIRs_Init();
 8001e82:	f000 f9eb 	bl	800225c <PIRs_Init>

	/*==========Enter IDs To Store In Array Pass==========*/
	 Store_IDs_From_Admin();
 8001e86:	f000 fa05 	bl	8002294 <Store_IDs_From_Admin>

	/*Dash Bord LCD*/
	LCD_Welcome();
 8001e8a:	f000 f951 	bl	8002130 <LCD_Welcome>
	Timer_dms(200);
 8001e8e:	20c8      	movs	r0, #200	; 0xc8
 8001e90:	f7ff ff94 	bl	8001dbc <Timer_dms>
	LCD_Display_Empty_Slots();
 8001e94:	f000 f970 	bl	8002178 <LCD_Display_Empty_Slots>
	/* PA9  TX
	 * PA10 RX
	 * PA11 CTC
	 * PA12 RTS
	 */
	MCAL_USART_init(USART1 , &USART1_Config);
 8001e98:	4977      	ldr	r1, [pc, #476]	; (8002078 <main+0x220>)
 8001e9a:	4878      	ldr	r0, [pc, #480]	; (800207c <main+0x224>)
 8001e9c:	f7ff fd1c 	bl	80018d8 <MCAL_USART_init>
	/* PA2  ->TX
	 * PA3 ->RX
	 * PA0 ->CTS
	 * PA1 ->RTS
	 */
	MCAL_USART_init(USART2, &USART2_Config);
 8001ea0:	4977      	ldr	r1, [pc, #476]	; (8002080 <main+0x228>)
 8001ea2:	4878      	ldr	r0, [pc, #480]	; (8002084 <main+0x22c>)
 8001ea4:	f7ff fd18 	bl	80018d8 <MCAL_USART_init>
	while(1)
	{
		//Reset Flags

		//Entry/Exit Operation
		if( Available_Slots>0 )
 8001ea8:	4b77      	ldr	r3, [pc, #476]	; (8002088 <main+0x230>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d018      	beq.n	8001ee2 <main+0x8a>
		{
			LCD_GOTO_XY(&LCD2, (LCD2.Ch_Counter/16)+1, 0);
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <main+0x21c>)
 8001eb2:	7cdb      	ldrb	r3, [r3, #19]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	486c      	ldr	r0, [pc, #432]	; (8002074 <main+0x21c>)
 8001ec2:	f7fe ffd5 	bl	8000e70 <LCD_GOTO_XY>
			LCD_WRITE_STRING(&LCD2,"Plz Enter ur ID");
 8001ec6:	4971      	ldr	r1, [pc, #452]	; (800208c <main+0x234>)
 8001ec8:	486a      	ldr	r0, [pc, #424]	; (8002074 <main+0x21c>)
 8001eca:	f7ff f981 	bl	80011d0 <LCD_WRITE_STRING>
			while(EntryID_Flag == FALSE && ExitID_Flag == FALSE);
 8001ece:	bf00      	nop
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <main+0x238>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d127      	bne.n	8001f28 <main+0xd0>
 8001ed8:	4b6e      	ldr	r3, [pc, #440]	; (8002094 <main+0x23c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f7      	beq.n	8001ed0 <main+0x78>
 8001ee0:	e022      	b.n	8001f28 <main+0xd0>

		}
		/*======Parking is full so not allow enter cars=======*/
		else if (Available_Slots == 0)
 8001ee2:	4b69      	ldr	r3, [pc, #420]	; (8002088 <main+0x230>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d11e      	bne.n	8001f28 <main+0xd0>
		{
			LCD_GOTO_XY(&LCD2, (LCD2.Ch_Counter/16)+1, 0);
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <main+0x21c>)
 8001eec:	7cdb      	ldrb	r3, [r3, #19]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	485e      	ldr	r0, [pc, #376]	; (8002074 <main+0x21c>)
 8001efc:	f7fe ffb8 	bl	8000e70 <LCD_GOTO_XY>
			LCD_WRITE_STRING(&LCD2,"NO Available Slots");
 8001f00:	4965      	ldr	r1, [pc, #404]	; (8002098 <main+0x240>)
 8001f02:	485c      	ldr	r0, [pc, #368]	; (8002074 <main+0x21c>)
 8001f04:	f7ff f964 	bl	80011d0 <LCD_WRITE_STRING>
			LCD_GOTO_XY(&LCD2, (LCD2.Ch_Counter/16)+1, 0);
 8001f08:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <main+0x21c>)
 8001f0a:	7cdb      	ldrb	r3, [r3, #19]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4856      	ldr	r0, [pc, #344]	; (8002074 <main+0x21c>)
 8001f1a:	f7fe ffa9 	bl	8000e70 <LCD_GOTO_XY>
			LCD_WRITE_STRING(&LCD2,"Come Back Later");
 8001f1e:	495f      	ldr	r1, [pc, #380]	; (800209c <main+0x244>)
 8001f20:	4854      	ldr	r0, [pc, #336]	; (8002074 <main+0x21c>)
 8001f22:	f7ff f955 	bl	80011d0 <LCD_WRITE_STRING>
			continue;
 8001f26:	e0a2      	b.n	800206e <main+0x216>
		}

		//Search about ID in array of Pass
		for(int i=0;i<3;i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e04d      	b.n	8001fca <main+0x172>
		{
			if (EntryID_Flag == TRUE){
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <main+0x238>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d11f      	bne.n	8001f76 <main+0x11e>

				if(RFID_CARD_Enter == pass[i]){
 8001f36:	4a5a      	ldr	r2, [pc, #360]	; (80020a0 <main+0x248>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <main+0x24c>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d13a      	bne.n	8001fbe <main+0x166>
					LEDs_Control(GREEN_LED);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f000 f957 	bl	80021fc <LEDs_Control>
					LCD_WRITE_STRING(&LCD2,"Successful Entry");
 8001f4e:	4956      	ldr	r1, [pc, #344]	; (80020a8 <main+0x250>)
 8001f50:	4848      	ldr	r0, [pc, #288]	; (8002074 <main+0x21c>)
 8001f52:	f7ff f93d 	bl	80011d0 <LCD_WRITE_STRING>
					Available_Slots--;
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <main+0x230>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <main+0x230>)
 8001f60:	701a      	strb	r2, [r3, #0]
					EntryCar_Flag = TRUE;
 8001f62:	4b52      	ldr	r3, [pc, #328]	; (80020ac <main+0x254>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
					RFID_CARD_Enter = 0;
 8001f68:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <main+0x24c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
					EntryID_Flag = FALSE;
 8001f6e:	4b48      	ldr	r3, [pc, #288]	; (8002090 <main+0x238>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]

					break;
 8001f74:	e02c      	b.n	8001fd0 <main+0x178>
				}
			}
			else if (ExitID_Flag == TRUE){
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <main+0x23c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d11f      	bne.n	8001fbe <main+0x166>
				if(RFID_CARD_EXIT == pass[i]){
 8001f7e:	4a48      	ldr	r2, [pc, #288]	; (80020a0 <main+0x248>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <main+0x258>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d116      	bne.n	8001fbe <main+0x166>
					LEDs_Control(GREEN_LED);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f000 f933 	bl	80021fc <LEDs_Control>
					LCD_WRITE_STRING(&LCD2,"Successful Exit");
 8001f96:	4947      	ldr	r1, [pc, #284]	; (80020b4 <main+0x25c>)
 8001f98:	4836      	ldr	r0, [pc, #216]	; (8002074 <main+0x21c>)
 8001f9a:	f7ff f919 	bl	80011d0 <LCD_WRITE_STRING>
					Available_Slots++;
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <main+0x230>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b38      	ldr	r3, [pc, #224]	; (8002088 <main+0x230>)
 8001fa8:	701a      	strb	r2, [r3, #0]
					ExitCar_Flag = TRUE;
 8001faa:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <main+0x260>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]

					ExitID_Flag = FALSE;
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <main+0x23c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
					RFID_CARD_EXIT = 0;
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <main+0x258>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	801a      	strh	r2, [r3, #0]
					break;
 8001fbc:	e008      	b.n	8001fd0 <main+0x178>
					}
			}
			Search_Done = 1;
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <main+0x264>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<3;i++)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	ddae      	ble.n	8001f2e <main+0xd6>
		}
		/*==================Wrong Id====================*/
		if ((RFID_CARD_EXIT>0 || RFID_CARD_Enter>0) && Search_Done == 1){
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <main+0x258>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <main+0x188>
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <main+0x24c>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <main+0x1b0>
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <main+0x264>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10f      	bne.n	8002008 <main+0x1b0>
			LEDs_Control(RED_LED);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f000 f907 	bl	80021fc <LEDs_Control>
			LCD_WRITE_STRING(&LCD2,"Wrong ID! Please Enter a valid one");
 8001fee:	4934      	ldr	r1, [pc, #208]	; (80020c0 <main+0x268>)
 8001ff0:	4820      	ldr	r0, [pc, #128]	; (8002074 <main+0x21c>)
 8001ff2:	f7ff f8ed 	bl	80011d0 <LCD_WRITE_STRING>
			Search_Done = 0;
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <main+0x264>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
			RFID_CARD_EXIT = 0;
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <main+0x258>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	801a      	strh	r2, [r3, #0]
			RFID_CARD_Enter = 0;
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <main+0x24c>)
 8002004:	2200      	movs	r2, #0
 8002006:	801a      	strh	r2, [r3, #0]
		}
		/*=====================Enter gate=====================*/
		if(EntryCar_Flag == TRUE){
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <main+0x254>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d114      	bne.n	800203a <main+0x1e2>
			Servo1_Entry_Gate(UP);
 8002010:	2001      	movs	r0, #1
 8002012:	f7fe fd2f 	bl	8000a74 <Servo1_Entry_Gate>
			while(PIR1_PinVal);
 8002016:	bf00      	nop
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <main+0x26c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f8      	bne.n	8002018 <main+0x1c0>
			WAIT_ms(10000);
 8002026:	f242 7010 	movw	r0, #10000	; 0x2710
 800202a:	f7ff fedf 	bl	8001dec <WAIT_ms>
			Servo1_Entry_Gate(DOWN);
 800202e:	2002      	movs	r0, #2
 8002030:	f7fe fd20 	bl	8000a74 <Servo1_Entry_Gate>
			EntryCar_Flag = FALSE;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <main+0x254>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
		}
		/*===================Exit gate====================*/
		if(ExitCar_Flag == TRUE){
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <main+0x260>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	f47f af32 	bne.w	8001ea8 <main+0x50>
			Servo2_Exit_Gate(UP);
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe fd5d 	bl	8000b04 <Servo2_Exit_Gate>
			while(PIR2_PinVal);
 800204a:	bf00      	nop
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <main+0x26c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f8      	bne.n	800204c <main+0x1f4>
			WAIT_ms(10000);
 800205a:	f242 7010 	movw	r0, #10000	; 0x2710
 800205e:	f7ff fec5 	bl	8001dec <WAIT_ms>
			Servo2_Exit_Gate(DOWN);
 8002062:	2002      	movs	r0, #2
 8002064:	f7fe fd4e 	bl	8000b04 <Servo2_Exit_Gate>
			ExitCar_Flag = FALSE;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <main+0x260>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
		if( Available_Slots>0 )
 800206e:	e71b      	b.n	8001ea8 <main+0x50>
 8002070:	20000020 	.word	0x20000020
 8002074:	20000034 	.word	0x20000034
 8002078:	20000048 	.word	0x20000048
 800207c:	40013800 	.word	0x40013800
 8002080:	2000005c 	.word	0x2000005c
 8002084:	40004400 	.word	0x40004400
 8002088:	2000001c 	.word	0x2000001c
 800208c:	08002964 	.word	0x08002964
 8002090:	2000010b 	.word	0x2000010b
 8002094:	2000010c 	.word	0x2000010c
 8002098:	08002974 	.word	0x08002974
 800209c:	08002988 	.word	0x08002988
 80020a0:	20000108 	.word	0x20000108
 80020a4:	2000014c 	.word	0x2000014c
 80020a8:	08002998 	.word	0x08002998
 80020ac:	2000010d 	.word	0x2000010d
 80020b0:	2000014e 	.word	0x2000014e
 80020b4:	080029ac 	.word	0x080029ac
 80020b8:	2000010e 	.word	0x2000010e
 80020bc:	2000010f 	.word	0x2000010f
 80020c0:	080029bc 	.word	0x080029bc
 80020c4:	40010800 	.word	0x40010800

080020c8 <RFID_CARD_Enter_CallBack>:
}


/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
	char *ID_String;
	MCAL_USART_ReceiveNum(USART1,ID_String,ID_Length );
 80020ce:	2202      	movs	r2, #2
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4807      	ldr	r0, [pc, #28]	; (80020f0 <RFID_CARD_Enter_CallBack+0x28>)
 80020d4:	f7ff fcec 	bl	8001ab0 <MCAL_USART_ReceiveNum>
	RFID_CARD_Enter = *ID_String;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <RFID_CARD_Enter_CallBack+0x2c>)
 80020e0:	801a      	strh	r2, [r3, #0]

	EntryID_Flag = TRUE;
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <RFID_CARD_Enter_CallBack+0x30>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40013800 	.word	0x40013800
 80020f4:	2000014c 	.word	0x2000014c
 80020f8:	2000010b 	.word	0x2000010b

080020fc <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0

	char *ID_String;
	MCAL_USART_ReceiveNum(USART2,ID_String,ID_Length );
 8002102:	2202      	movs	r2, #2
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4807      	ldr	r0, [pc, #28]	; (8002124 <RFID_CARD_EXIT_CallBack+0x28>)
 8002108:	f7ff fcd2 	bl	8001ab0 <MCAL_USART_ReceiveNum>
	RFID_CARD_EXIT = *ID_String;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <RFID_CARD_EXIT_CallBack+0x2c>)
 8002114:	801a      	strh	r2, [r3, #0]

	ExitID_Flag = TRUE;
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <RFID_CARD_EXIT_CallBack+0x30>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40004400 	.word	0x40004400
 8002128:	2000014e 	.word	0x2000014e
 800212c:	2000010c 	.word	0x2000010c

08002130 <LCD_Welcome>:



void LCD_Welcome(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	/*Dash Bord LCD*/

	LCD_WRITE_COMMAND(&LCD2, LCD_DISP_ON);
 8002134:	210c      	movs	r1, #12
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <LCD_Welcome+0x3c>)
 8002138:	f7fe ff6f 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(&LCD2, LCD_CLEAR_SCREEN);
 800213c:	2101      	movs	r1, #1
 800213e:	480b      	ldr	r0, [pc, #44]	; (800216c <LCD_Welcome+0x3c>)
 8002140:	f7fe ff6b 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(&LCD2, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	4808      	ldr	r0, [pc, #32]	; (800216c <LCD_Welcome+0x3c>)
 800214a:	f7fe fe91 	bl	8000e70 <LCD_GOTO_XY>
	LCD_WRITE_STRING(&LCD2,"Welcome in");
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <LCD_Welcome+0x40>)
 8002150:	4806      	ldr	r0, [pc, #24]	; (800216c <LCD_Welcome+0x3c>)
 8002152:	f7ff f83d 	bl	80011d0 <LCD_WRITE_STRING>
	LCD_GOTO_XY(&LCD2, 1, 0 );
 8002156:	2200      	movs	r2, #0
 8002158:	2101      	movs	r1, #1
 800215a:	4804      	ldr	r0, [pc, #16]	; (800216c <LCD_Welcome+0x3c>)
 800215c:	f7fe fe88 	bl	8000e70 <LCD_GOTO_XY>
	LCD_WRITE_STRING(&LCD2,"Ahmed'S Parking");
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <LCD_Welcome+0x44>)
 8002162:	4802      	ldr	r0, [pc, #8]	; (800216c <LCD_Welcome+0x3c>)
 8002164:	f7ff f834 	bl	80011d0 <LCD_WRITE_STRING>
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000034 	.word	0x20000034
 8002170:	080029e0 	.word	0x080029e0
 8002174:	080029ec 	.word	0x080029ec

08002178 <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(&LCD2, LCD_DISP_ON);
 800217c:	210c      	movs	r1, #12
 800217e:	480e      	ldr	r0, [pc, #56]	; (80021b8 <LCD_Display_Empty_Slots+0x40>)
 8002180:	f7fe ff4b 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(&LCD2, LCD_CLEAR_SCREEN);
 8002184:	2101      	movs	r1, #1
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LCD_Display_Empty_Slots+0x40>)
 8002188:	f7fe ff47 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(&LCD2, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <LCD_Display_Empty_Slots+0x40>)
 8002192:	f7fe fe6d 	bl	8000e70 <LCD_GOTO_XY>
	LCD_WRITE_STRING(&LCD2,"Empty Slots=");
 8002196:	4909      	ldr	r1, [pc, #36]	; (80021bc <LCD_Display_Empty_Slots+0x44>)
 8002198:	4807      	ldr	r0, [pc, #28]	; (80021b8 <LCD_Display_Empty_Slots+0x40>)
 800219a:	f7ff f819 	bl	80011d0 <LCD_WRITE_STRING>
	LCD_GOTO_XY(&LCD2, 0, 13);
 800219e:	220d      	movs	r2, #13
 80021a0:	2100      	movs	r1, #0
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <LCD_Display_Empty_Slots+0x40>)
 80021a4:	f7fe fe64 	bl	8000e70 <LCD_GOTO_XY>
	LCD_WRITE_NUM(&LCD2,Available_Slots);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <LCD_Display_Empty_Slots+0x48>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <LCD_Display_Empty_Slots+0x40>)
 80021b0:	f7ff f82a 	bl	8001208 <LCD_WRITE_NUM>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000034 	.word	0x20000034
 80021bc:	080029fc 	.word	0x080029fc
 80021c0:	2000001c 	.word	0x2000001c

080021c4 <LEDs_Init>:

void LEDs_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
	//RED LED A0
	GPIO_PinConfig_t LED_pincfg = { GPIO_PIN0 , GPIO_Mode_OUT_PP, GPIO_Speed_NONE};
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <LEDs_Init+0x30>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &LED_pincfg);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <LEDs_Init+0x34>)
 80021d6:	f7ff f9d0 	bl	800157a <MCAL_GPIO_init>
	//GREEN LED A11
	LED_pincfg.GPIO_PINNumber = GPIO_PIN11;
 80021da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021de:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &LED_pincfg);
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <LEDs_Init+0x34>)
 80021e6:	f7ff f9c8 	bl	800157a <MCAL_GPIO_init>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	08002a0c 	.word	0x08002a0c
 80021f8:	40010800 	.word	0x40010800

080021fc <LEDs_Control>:
void LEDs_Control(LED_Define_t LED)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	//RED LED A0
		if(LED == RED_LED){
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10e      	bne.n	800222a <LEDs_Control+0x2e>
			MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN0, GPIO_PIN_SET);
 800220c:	2201      	movs	r2, #1
 800220e:	2101      	movs	r1, #1
 8002210:	4811      	ldr	r0, [pc, #68]	; (8002258 <LEDs_Control+0x5c>)
 8002212:	f7ff fa46 	bl	80016a2 <MCAL_GPIO_WritePIN>
			Timer_dms(2000);
 8002216:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800221a:	f7ff fdcf 	bl	8001dbc <Timer_dms>
			MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN0, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	2101      	movs	r1, #1
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <LEDs_Control+0x5c>)
 8002224:	f7ff fa3d 	bl	80016a2 <MCAL_GPIO_WritePIN>
		else if(LED == GREEN_LED){
			MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN11, GPIO_PIN_SET);
			Timer_dms(2000);
			MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN11, GPIO_PIN_RESET);
	}
}
 8002228:	e012      	b.n	8002250 <LEDs_Control+0x54>
		else if(LED == GREEN_LED){
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10f      	bne.n	8002250 <LEDs_Control+0x54>
			MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN11, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002236:	4808      	ldr	r0, [pc, #32]	; (8002258 <LEDs_Control+0x5c>)
 8002238:	f7ff fa33 	bl	80016a2 <MCAL_GPIO_WritePIN>
			Timer_dms(2000);
 800223c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002240:	f7ff fdbc 	bl	8001dbc <Timer_dms>
			MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN11, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <LEDs_Control+0x5c>)
 800224c:	f7ff fa29 	bl	80016a2 <MCAL_GPIO_WritePIN>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40010800 	.word	0x40010800

0800225c <PIRs_Init>:
void PIRs_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_PinConfig_t PinConfg;
	PinConfg.GPIO_PINNumber=GPIO_PIN7;
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	80bb      	strh	r3, [r7, #4]
	PinConfg.GPIO_Mode = GPIO_Mode_IN_PU;
 8002266:	2302      	movs	r3, #2
 8002268:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(GPIOA, &PinConfg);
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4808      	ldr	r0, [pc, #32]	; (8002290 <PIRs_Init+0x34>)
 8002270:	f7ff f983 	bl	800157a <MCAL_GPIO_init>

	//PIR2 A1
	PinConfg.GPIO_PINNumber=GPIO_PIN1;
 8002274:	2302      	movs	r3, #2
 8002276:	80bb      	strh	r3, [r7, #4]
	PinConfg.GPIO_Mode = GPIO_Mode_IN_PU;
 8002278:	2302      	movs	r3, #2
 800227a:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(GPIOA, &PinConfg);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <PIRs_Init+0x34>)
 8002282:	f7ff f97a 	bl	800157a <MCAL_GPIO_init>

//	MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN0, GPIO_PIN_SET); //make A0 ground
//	MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN11, GPIO_PIN_SET); //make A11 ground

}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40010800 	.word	0x40010800

08002294 <Store_IDs_From_Admin>:

void Store_IDs_From_Admin(void)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(&LCD, LCD_DISP_ON);
 800229a:	210c      	movs	r1, #12
 800229c:	481f      	ldr	r0, [pc, #124]	; (800231c <Store_IDs_From_Admin+0x88>)
 800229e:	f7fe febc 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(&LCD, LCD_CLEAR_SCREEN);
 80022a2:	2101      	movs	r1, #1
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022a6:	f7fe feb8 	bl	800101a <LCD_WRITE_COMMAND>
	LCD_WRITE_STRING(&LCD,"<Enter Auth IDs>");
 80022aa:	491d      	ldr	r1, [pc, #116]	; (8002320 <Store_IDs_From_Admin+0x8c>)
 80022ac:	481b      	ldr	r0, [pc, #108]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022ae:	f7fe ff8f 	bl	80011d0 <LCD_WRITE_STRING>
	for(char i=0;i<Available_Slots;i++){
 80022b2:	2300      	movs	r3, #0
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	e027      	b.n	8002308 <Store_IDs_From_Admin+0x74>
		LCD_GOTO_XY(&LCD, i+1, 0);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022c4:	f7fe fdd4 	bl	8000e70 <LCD_GOTO_XY>
		LCD_WRITE_STRING(&LCD,"Auth ID");
 80022c8:	4916      	ldr	r1, [pc, #88]	; (8002324 <Store_IDs_From_Admin+0x90>)
 80022ca:	4814      	ldr	r0, [pc, #80]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022cc:	f7fe ff80 	bl	80011d0 <LCD_WRITE_STRING>
		LCD_WRITE_NUM(&LCD,i+1);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	3301      	adds	r3, #1
 80022d4:	4619      	mov	r1, r3
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022d8:	f7fe ff96 	bl	8001208 <LCD_WRITE_NUM>
		LCD_WRITE_STRING(&LCD,":");
 80022dc:	4912      	ldr	r1, [pc, #72]	; (8002328 <Store_IDs_From_Admin+0x94>)
 80022de:	480f      	ldr	r0, [pc, #60]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022e0:	f7fe ff76 	bl	80011d0 <LCD_WRITE_STRING>
		pass[i] = Keypad_getNum(ID_Length);
 80022e4:	79fc      	ldrb	r4, [r7, #7]
 80022e6:	2002      	movs	r0, #2
 80022e8:	f7fe fd34 	bl	8000d54 <Keypad_getNum>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <Store_IDs_From_Admin+0x98>)
 80022f2:	551a      	strb	r2, [r3, r4]
		LCD_WRITE_NUM(&LCD,pass[i]);
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4a0d      	ldr	r2, [pc, #52]	; (800232c <Store_IDs_From_Admin+0x98>)
 80022f8:	5cd3      	ldrb	r3, [r2, r3]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4807      	ldr	r0, [pc, #28]	; (800231c <Store_IDs_From_Admin+0x88>)
 80022fe:	f7fe ff83 	bl	8001208 <LCD_WRITE_NUM>
	for(char i=0;i<Available_Slots;i++){
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	3301      	adds	r3, #1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <Store_IDs_From_Admin+0x9c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	429a      	cmp	r2, r3
 8002310:	d3d2      	bcc.n	80022b8 <Store_IDs_From_Admin+0x24>
	}
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	20000020 	.word	0x20000020
 8002320:	08002a10 	.word	0x08002a10
 8002324:	08002a24 	.word	0x08002a24
 8002328:	08002a2c 	.word	0x08002a2c
 800232c:	20000108 	.word	0x20000108
 8002330:	2000001c 	.word	0x2000001c

08002334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002336:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <LoopForever+0x6>)
  ldr r1, =_edata
 800233e:	490d      	ldr	r1, [pc, #52]	; (8002374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <LoopForever+0xe>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002354:	4c0a      	ldr	r4, [pc, #40]	; (8002380 <LoopForever+0x16>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002362:	f000 f817 	bl	8002394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002366:	f7ff fd77 	bl	8001e58 <main>

0800236a <LoopForever>:

LoopForever:
    b LoopForever
 800236a:	e7fe      	b.n	800236a <LoopForever>
  ldr   r0, =_estack
 800236c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002378:	08002a58 	.word	0x08002a58
  ldr r2, =_sbss
 800237c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002380:	20000150 	.word	0x20000150

08002384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC1_2_IRQHandler>
	...

08002388 <__errno>:
 8002388:	4b01      	ldr	r3, [pc, #4]	; (8002390 <__errno+0x8>)
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000070 	.word	0x20000070

08002394 <__libc_init_array>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	2500      	movs	r5, #0
 8002398:	4e0c      	ldr	r6, [pc, #48]	; (80023cc <__libc_init_array+0x38>)
 800239a:	4c0d      	ldr	r4, [pc, #52]	; (80023d0 <__libc_init_array+0x3c>)
 800239c:	1ba4      	subs	r4, r4, r6
 800239e:	10a4      	asrs	r4, r4, #2
 80023a0:	42a5      	cmp	r5, r4
 80023a2:	d109      	bne.n	80023b8 <__libc_init_array+0x24>
 80023a4:	f000 fad2 	bl	800294c <_init>
 80023a8:	2500      	movs	r5, #0
 80023aa:	4e0a      	ldr	r6, [pc, #40]	; (80023d4 <__libc_init_array+0x40>)
 80023ac:	4c0a      	ldr	r4, [pc, #40]	; (80023d8 <__libc_init_array+0x44>)
 80023ae:	1ba4      	subs	r4, r4, r6
 80023b0:	10a4      	asrs	r4, r4, #2
 80023b2:	42a5      	cmp	r5, r4
 80023b4:	d105      	bne.n	80023c2 <__libc_init_array+0x2e>
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
 80023b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023bc:	4798      	blx	r3
 80023be:	3501      	adds	r5, #1
 80023c0:	e7ee      	b.n	80023a0 <__libc_init_array+0xc>
 80023c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023c6:	4798      	blx	r3
 80023c8:	3501      	adds	r5, #1
 80023ca:	e7f2      	b.n	80023b2 <__libc_init_array+0x1e>
 80023cc:	08002a50 	.word	0x08002a50
 80023d0:	08002a50 	.word	0x08002a50
 80023d4:	08002a50 	.word	0x08002a50
 80023d8:	08002a54 	.word	0x08002a54

080023dc <log10>:
 80023dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023e0:	b08b      	sub	sp, #44	; 0x2c
 80023e2:	4604      	mov	r4, r0
 80023e4:	460d      	mov	r5, r1
 80023e6:	f000 f873 	bl	80024d0 <__ieee754_log10>
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <log10+0xe0>)
 80023ec:	4680      	mov	r8, r0
 80023ee:	f993 6000 	ldrsb.w	r6, [r3]
 80023f2:	4689      	mov	r9, r1
 80023f4:	1c73      	adds	r3, r6, #1
 80023f6:	d05c      	beq.n	80024b2 <log10+0xd6>
 80023f8:	4622      	mov	r2, r4
 80023fa:	462b      	mov	r3, r5
 80023fc:	4620      	mov	r0, r4
 80023fe:	4629      	mov	r1, r5
 8002400:	f7fe fb0c 	bl	8000a1c <__aeabi_dcmpun>
 8002404:	4607      	mov	r7, r0
 8002406:	2800      	cmp	r0, #0
 8002408:	d153      	bne.n	80024b2 <log10+0xd6>
 800240a:	2200      	movs	r2, #0
 800240c:	2300      	movs	r3, #0
 800240e:	4620      	mov	r0, r4
 8002410:	4629      	mov	r1, r5
 8002412:	f7fe fae5 	bl	80009e0 <__aeabi_dcmple>
 8002416:	2800      	cmp	r0, #0
 8002418:	d04b      	beq.n	80024b2 <log10+0xd6>
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <log10+0xe4>)
 800241c:	9708      	str	r7, [sp, #32]
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002424:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002428:	b9a6      	cbnz	r6, 8002454 <log10+0x78>
 800242a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <log10+0xe8>)
 8002430:	4620      	mov	r0, r4
 8002432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002436:	4629      	mov	r1, r5
 8002438:	2200      	movs	r2, #0
 800243a:	2300      	movs	r3, #0
 800243c:	f7fe fabc 	bl	80009b8 <__aeabi_dcmpeq>
 8002440:	bb40      	cbnz	r0, 8002494 <log10+0xb8>
 8002442:	2301      	movs	r3, #1
 8002444:	2e02      	cmp	r6, #2
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	d119      	bne.n	800247e <log10+0xa2>
 800244a:	f7ff ff9d 	bl	8002388 <__errno>
 800244e:	2321      	movs	r3, #33	; 0x21
 8002450:	6003      	str	r3, [r0, #0]
 8002452:	e019      	b.n	8002488 <log10+0xac>
 8002454:	2200      	movs	r2, #0
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <log10+0xec>)
 8002458:	4620      	mov	r0, r4
 800245a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800245e:	4629      	mov	r1, r5
 8002460:	2200      	movs	r2, #0
 8002462:	2300      	movs	r3, #0
 8002464:	f7fe faa8 	bl	80009b8 <__aeabi_dcmpeq>
 8002468:	2800      	cmp	r0, #0
 800246a:	d0ea      	beq.n	8002442 <log10+0x66>
 800246c:	2302      	movs	r3, #2
 800246e:	429e      	cmp	r6, r3
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	d111      	bne.n	8002498 <log10+0xbc>
 8002474:	f7ff ff88 	bl	8002388 <__errno>
 8002478:	2322      	movs	r3, #34	; 0x22
 800247a:	6003      	str	r3, [r0, #0]
 800247c:	e011      	b.n	80024a2 <log10+0xc6>
 800247e:	4668      	mov	r0, sp
 8002480:	f000 f8a8 	bl	80025d4 <matherr>
 8002484:	2800      	cmp	r0, #0
 8002486:	d0e0      	beq.n	800244a <log10+0x6e>
 8002488:	4810      	ldr	r0, [pc, #64]	; (80024cc <log10+0xf0>)
 800248a:	f000 f8a5 	bl	80025d8 <nan>
 800248e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002492:	e006      	b.n	80024a2 <log10+0xc6>
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	4668      	mov	r0, sp
 800249a:	f000 f89b 	bl	80025d4 <matherr>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d0e8      	beq.n	8002474 <log10+0x98>
 80024a2:	9b08      	ldr	r3, [sp, #32]
 80024a4:	b11b      	cbz	r3, 80024ae <log10+0xd2>
 80024a6:	f7ff ff6f 	bl	8002388 <__errno>
 80024aa:	9b08      	ldr	r3, [sp, #32]
 80024ac:	6003      	str	r3, [r0, #0]
 80024ae:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80024b2:	4640      	mov	r0, r8
 80024b4:	4649      	mov	r1, r9
 80024b6:	b00b      	add	sp, #44	; 0x2c
 80024b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024bc:	200000d4 	.word	0x200000d4
 80024c0:	08002a48 	.word	0x08002a48
 80024c4:	c7efffff 	.word	0xc7efffff
 80024c8:	fff00000 	.word	0xfff00000
 80024cc:	08002a4d 	.word	0x08002a4d

080024d0 <__ieee754_log10>:
 80024d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80024d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
 80024dc:	460b      	mov	r3, r1
 80024de:	da26      	bge.n	800252e <__ieee754_log10+0x5e>
 80024e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80024e4:	4302      	orrs	r2, r0
 80024e6:	d107      	bne.n	80024f8 <__ieee754_log10+0x28>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2300      	movs	r3, #0
 80024ec:	2000      	movs	r0, #0
 80024ee:	4936      	ldr	r1, [pc, #216]	; (80025c8 <__ieee754_log10+0xf8>)
 80024f0:	f7fe f924 	bl	800073c <__aeabi_ddiv>
 80024f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f8:	2900      	cmp	r1, #0
 80024fa:	da05      	bge.n	8002508 <__ieee754_log10+0x38>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f7fd fe3b 	bl	8000178 <__aeabi_dsub>
 8002502:	2200      	movs	r2, #0
 8002504:	2300      	movs	r3, #0
 8002506:	e7f3      	b.n	80024f0 <__ieee754_log10+0x20>
 8002508:	2200      	movs	r2, #0
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <__ieee754_log10+0xfc>)
 800250c:	f7fd ffec 	bl	80004e8 <__aeabi_dmul>
 8002510:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8002514:	4604      	mov	r4, r0
 8002516:	460d      	mov	r5, r1
 8002518:	460b      	mov	r3, r1
 800251a:	492d      	ldr	r1, [pc, #180]	; (80025d0 <__ieee754_log10+0x100>)
 800251c:	428b      	cmp	r3, r1
 800251e:	dd08      	ble.n	8002532 <__ieee754_log10+0x62>
 8002520:	4622      	mov	r2, r4
 8002522:	462b      	mov	r3, r5
 8002524:	4620      	mov	r0, r4
 8002526:	4629      	mov	r1, r5
 8002528:	f7fd fe28 	bl	800017c <__adddf3>
 800252c:	e7e2      	b.n	80024f4 <__ieee754_log10+0x24>
 800252e:	2200      	movs	r2, #0
 8002530:	e7f3      	b.n	800251a <__ieee754_log10+0x4a>
 8002532:	1518      	asrs	r0, r3, #20
 8002534:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8002538:	4410      	add	r0, r2
 800253a:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800253e:	4448      	add	r0, r9
 8002540:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8002544:	f7fd ff66 	bl	8000414 <__aeabi_i2d>
 8002548:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800254c:	3303      	adds	r3, #3
 800254e:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8002552:	4606      	mov	r6, r0
 8002554:	460f      	mov	r7, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f000 f845 	bl	80025e8 <__ieee754_log>
 800255e:	a314      	add	r3, pc, #80	; (adr r3, 80025b0 <__ieee754_log10+0xe0>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	4680      	mov	r8, r0
 8002566:	4689      	mov	r9, r1
 8002568:	4630      	mov	r0, r6
 800256a:	4639      	mov	r1, r7
 800256c:	f7fd ffbc 	bl	80004e8 <__aeabi_dmul>
 8002570:	a311      	add	r3, pc, #68	; (adr r3, 80025b8 <__ieee754_log10+0xe8>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	4604      	mov	r4, r0
 8002578:	460d      	mov	r5, r1
 800257a:	4640      	mov	r0, r8
 800257c:	4649      	mov	r1, r9
 800257e:	f7fd ffb3 	bl	80004e8 <__aeabi_dmul>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f7fd fdf7 	bl	800017c <__adddf3>
 800258e:	a30c      	add	r3, pc, #48	; (adr r3, 80025c0 <__ieee754_log10+0xf0>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	4630      	mov	r0, r6
 800259a:	4639      	mov	r1, r7
 800259c:	f7fd ffa4 	bl	80004e8 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	e7be      	b.n	8002528 <__ieee754_log10+0x58>
 80025aa:	bf00      	nop
 80025ac:	f3af 8000 	nop.w
 80025b0:	11f12b36 	.word	0x11f12b36
 80025b4:	3d59fef3 	.word	0x3d59fef3
 80025b8:	1526e50e 	.word	0x1526e50e
 80025bc:	3fdbcb7b 	.word	0x3fdbcb7b
 80025c0:	509f6000 	.word	0x509f6000
 80025c4:	3fd34413 	.word	0x3fd34413
 80025c8:	c3500000 	.word	0xc3500000
 80025cc:	43500000 	.word	0x43500000
 80025d0:	7fefffff 	.word	0x7fefffff

080025d4 <matherr>:
 80025d4:	2000      	movs	r0, #0
 80025d6:	4770      	bx	lr

080025d8 <nan>:
 80025d8:	2000      	movs	r0, #0
 80025da:	4901      	ldr	r1, [pc, #4]	; (80025e0 <nan+0x8>)
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	7ff80000 	.word	0x7ff80000
 80025e4:	00000000 	.word	0x00000000

080025e8 <__ieee754_log>:
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80025f0:	b087      	sub	sp, #28
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	460d      	mov	r5, r1
 80025f8:	da24      	bge.n	8002644 <__ieee754_log+0x5c>
 80025fa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80025fe:	4304      	orrs	r4, r0
 8002600:	d108      	bne.n	8002614 <__ieee754_log+0x2c>
 8002602:	2200      	movs	r2, #0
 8002604:	2300      	movs	r3, #0
 8002606:	2000      	movs	r0, #0
 8002608:	49cb      	ldr	r1, [pc, #812]	; (8002938 <__ieee754_log+0x350>)
 800260a:	f7fe f897 	bl	800073c <__aeabi_ddiv>
 800260e:	b007      	add	sp, #28
 8002610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002614:	2900      	cmp	r1, #0
 8002616:	da04      	bge.n	8002622 <__ieee754_log+0x3a>
 8002618:	f7fd fdae 	bl	8000178 <__aeabi_dsub>
 800261c:	2200      	movs	r2, #0
 800261e:	2300      	movs	r3, #0
 8002620:	e7f3      	b.n	800260a <__ieee754_log+0x22>
 8002622:	2200      	movs	r2, #0
 8002624:	4bc5      	ldr	r3, [pc, #788]	; (800293c <__ieee754_log+0x354>)
 8002626:	f7fd ff5f 	bl	80004e8 <__aeabi_dmul>
 800262a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	460d      	mov	r5, r1
 8002634:	49c2      	ldr	r1, [pc, #776]	; (8002940 <__ieee754_log+0x358>)
 8002636:	428d      	cmp	r5, r1
 8002638:	dd06      	ble.n	8002648 <__ieee754_log+0x60>
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fd fd9d 	bl	800017c <__adddf3>
 8002642:	e7e4      	b.n	800260e <__ieee754_log+0x26>
 8002644:	2600      	movs	r6, #0
 8002646:	e7f5      	b.n	8002634 <__ieee754_log+0x4c>
 8002648:	152c      	asrs	r4, r5, #20
 800264a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800264e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8002652:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002656:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800265a:	4426      	add	r6, r4
 800265c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8002660:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8002664:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8002668:	ea41 0305 	orr.w	r3, r1, r5
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	2200      	movs	r2, #0
 8002672:	4bb4      	ldr	r3, [pc, #720]	; (8002944 <__ieee754_log+0x35c>)
 8002674:	f7fd fd80 	bl	8000178 <__aeabi_dsub>
 8002678:	1cab      	adds	r3, r5, #2
 800267a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267e:	2b02      	cmp	r3, #2
 8002680:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8002684:	4682      	mov	sl, r0
 8002686:	468b      	mov	fp, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	dc53      	bgt.n	8002736 <__ieee754_log+0x14e>
 800268e:	2300      	movs	r3, #0
 8002690:	f7fe f992 	bl	80009b8 <__aeabi_dcmpeq>
 8002694:	b1d0      	cbz	r0, 80026cc <__ieee754_log+0xe4>
 8002696:	2c00      	cmp	r4, #0
 8002698:	f000 8120 	beq.w	80028dc <__ieee754_log+0x2f4>
 800269c:	4620      	mov	r0, r4
 800269e:	f7fd feb9 	bl	8000414 <__aeabi_i2d>
 80026a2:	a391      	add	r3, pc, #580	; (adr r3, 80028e8 <__ieee754_log+0x300>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	4606      	mov	r6, r0
 80026aa:	460f      	mov	r7, r1
 80026ac:	f7fd ff1c 	bl	80004e8 <__aeabi_dmul>
 80026b0:	a38f      	add	r3, pc, #572	; (adr r3, 80028f0 <__ieee754_log+0x308>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	4604      	mov	r4, r0
 80026b8:	460d      	mov	r5, r1
 80026ba:	4630      	mov	r0, r6
 80026bc:	4639      	mov	r1, r7
 80026be:	f7fd ff13 	bl	80004e8 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	e7b8      	b.n	800263e <__ieee754_log+0x56>
 80026cc:	a38a      	add	r3, pc, #552	; (adr r3, 80028f8 <__ieee754_log+0x310>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	4650      	mov	r0, sl
 80026d4:	4659      	mov	r1, fp
 80026d6:	f7fd ff07 	bl	80004e8 <__aeabi_dmul>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	2000      	movs	r0, #0
 80026e0:	4999      	ldr	r1, [pc, #612]	; (8002948 <__ieee754_log+0x360>)
 80026e2:	f7fd fd49 	bl	8000178 <__aeabi_dsub>
 80026e6:	4652      	mov	r2, sl
 80026e8:	4606      	mov	r6, r0
 80026ea:	460f      	mov	r7, r1
 80026ec:	465b      	mov	r3, fp
 80026ee:	4650      	mov	r0, sl
 80026f0:	4659      	mov	r1, fp
 80026f2:	f7fd fef9 	bl	80004e8 <__aeabi_dmul>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4630      	mov	r0, r6
 80026fc:	4639      	mov	r1, r7
 80026fe:	f7fd fef3 	bl	80004e8 <__aeabi_dmul>
 8002702:	4606      	mov	r6, r0
 8002704:	460f      	mov	r7, r1
 8002706:	b914      	cbnz	r4, 800270e <__ieee754_log+0x126>
 8002708:	4632      	mov	r2, r6
 800270a:	463b      	mov	r3, r7
 800270c:	e0a0      	b.n	8002850 <__ieee754_log+0x268>
 800270e:	4620      	mov	r0, r4
 8002710:	f7fd fe80 	bl	8000414 <__aeabi_i2d>
 8002714:	a374      	add	r3, pc, #464	; (adr r3, 80028e8 <__ieee754_log+0x300>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	4680      	mov	r8, r0
 800271c:	4689      	mov	r9, r1
 800271e:	f7fd fee3 	bl	80004e8 <__aeabi_dmul>
 8002722:	a373      	add	r3, pc, #460	; (adr r3, 80028f0 <__ieee754_log+0x308>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	4640      	mov	r0, r8
 800272e:	4649      	mov	r1, r9
 8002730:	f7fd feda 	bl	80004e8 <__aeabi_dmul>
 8002734:	e0a5      	b.n	8002882 <__ieee754_log+0x29a>
 8002736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800273a:	f7fd fd1f 	bl	800017c <__adddf3>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4650      	mov	r0, sl
 8002744:	4659      	mov	r1, fp
 8002746:	f7fd fff9 	bl	800073c <__aeabi_ddiv>
 800274a:	e9cd 0100 	strd	r0, r1, [sp]
 800274e:	4620      	mov	r0, r4
 8002750:	f7fd fe60 	bl	8000414 <__aeabi_i2d>
 8002754:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fd fec2 	bl	80004e8 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800276c:	f7fd febc 	bl	80004e8 <__aeabi_dmul>
 8002770:	a363      	add	r3, pc, #396	; (adr r3, 8002900 <__ieee754_log+0x318>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	4680      	mov	r8, r0
 8002778:	4689      	mov	r9, r1
 800277a:	f7fd feb5 	bl	80004e8 <__aeabi_dmul>
 800277e:	a362      	add	r3, pc, #392	; (adr r3, 8002908 <__ieee754_log+0x320>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	f7fd fcfa 	bl	800017c <__adddf3>
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	f7fd feac 	bl	80004e8 <__aeabi_dmul>
 8002790:	a35f      	add	r3, pc, #380	; (adr r3, 8002910 <__ieee754_log+0x328>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd fcf1 	bl	800017c <__adddf3>
 800279a:	4642      	mov	r2, r8
 800279c:	464b      	mov	r3, r9
 800279e:	f7fd fea3 	bl	80004e8 <__aeabi_dmul>
 80027a2:	a35d      	add	r3, pc, #372	; (adr r3, 8002918 <__ieee754_log+0x330>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f7fd fce8 	bl	800017c <__adddf3>
 80027ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027b0:	f7fd fe9a 	bl	80004e8 <__aeabi_dmul>
 80027b4:	a35a      	add	r3, pc, #360	; (adr r3, 8002920 <__ieee754_log+0x338>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80027be:	4640      	mov	r0, r8
 80027c0:	4649      	mov	r1, r9
 80027c2:	f7fd fe91 	bl	80004e8 <__aeabi_dmul>
 80027c6:	a358      	add	r3, pc, #352	; (adr r3, 8002928 <__ieee754_log+0x340>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fd fcd6 	bl	800017c <__adddf3>
 80027d0:	4642      	mov	r2, r8
 80027d2:	464b      	mov	r3, r9
 80027d4:	f7fd fe88 	bl	80004e8 <__aeabi_dmul>
 80027d8:	a355      	add	r3, pc, #340	; (adr r3, 8002930 <__ieee754_log+0x348>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd fccd 	bl	800017c <__adddf3>
 80027e2:	4642      	mov	r2, r8
 80027e4:	464b      	mov	r3, r9
 80027e6:	f7fd fe7f 	bl	80004e8 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80027f2:	f7fd fcc3 	bl	800017c <__adddf3>
 80027f6:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80027fa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80027fe:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8002802:	3551      	adds	r5, #81	; 0x51
 8002804:	4335      	orrs	r5, r6
 8002806:	2d00      	cmp	r5, #0
 8002808:	4680      	mov	r8, r0
 800280a:	4689      	mov	r9, r1
 800280c:	dd48      	ble.n	80028a0 <__ieee754_log+0x2b8>
 800280e:	2200      	movs	r2, #0
 8002810:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <__ieee754_log+0x360>)
 8002812:	4650      	mov	r0, sl
 8002814:	4659      	mov	r1, fp
 8002816:	f7fd fe67 	bl	80004e8 <__aeabi_dmul>
 800281a:	4652      	mov	r2, sl
 800281c:	465b      	mov	r3, fp
 800281e:	f7fd fe63 	bl	80004e8 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4606      	mov	r6, r0
 8002828:	460f      	mov	r7, r1
 800282a:	4640      	mov	r0, r8
 800282c:	4649      	mov	r1, r9
 800282e:	f7fd fca5 	bl	800017c <__adddf3>
 8002832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002836:	f7fd fe57 	bl	80004e8 <__aeabi_dmul>
 800283a:	4680      	mov	r8, r0
 800283c:	4689      	mov	r9, r1
 800283e:	b964      	cbnz	r4, 800285a <__ieee754_log+0x272>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4630      	mov	r0, r6
 8002846:	4639      	mov	r1, r7
 8002848:	f7fd fc96 	bl	8000178 <__aeabi_dsub>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4650      	mov	r0, sl
 8002852:	4659      	mov	r1, fp
 8002854:	f7fd fc90 	bl	8000178 <__aeabi_dsub>
 8002858:	e6d9      	b.n	800260e <__ieee754_log+0x26>
 800285a:	a323      	add	r3, pc, #140	; (adr r3, 80028e8 <__ieee754_log+0x300>)
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002864:	f7fd fe40 	bl	80004e8 <__aeabi_dmul>
 8002868:	a321      	add	r3, pc, #132	; (adr r3, 80028f0 <__ieee754_log+0x308>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	4604      	mov	r4, r0
 8002870:	460d      	mov	r5, r1
 8002872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002876:	f7fd fe37 	bl	80004e8 <__aeabi_dmul>
 800287a:	4642      	mov	r2, r8
 800287c:	464b      	mov	r3, r9
 800287e:	f7fd fc7d 	bl	800017c <__adddf3>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4630      	mov	r0, r6
 8002888:	4639      	mov	r1, r7
 800288a:	f7fd fc75 	bl	8000178 <__aeabi_dsub>
 800288e:	4652      	mov	r2, sl
 8002890:	465b      	mov	r3, fp
 8002892:	f7fd fc71 	bl	8000178 <__aeabi_dsub>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	e7d9      	b.n	8002854 <__ieee754_log+0x26c>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4650      	mov	r0, sl
 80028a6:	4659      	mov	r1, fp
 80028a8:	f7fd fc66 	bl	8000178 <__aeabi_dsub>
 80028ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80028b0:	f7fd fe1a 	bl	80004e8 <__aeabi_dmul>
 80028b4:	4606      	mov	r6, r0
 80028b6:	460f      	mov	r7, r1
 80028b8:	2c00      	cmp	r4, #0
 80028ba:	f43f af25 	beq.w	8002708 <__ieee754_log+0x120>
 80028be:	a30a      	add	r3, pc, #40	; (adr r3, 80028e8 <__ieee754_log+0x300>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028c8:	f7fd fe0e 	bl	80004e8 <__aeabi_dmul>
 80028cc:	a308      	add	r3, pc, #32	; (adr r3, 80028f0 <__ieee754_log+0x308>)
 80028ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d2:	4604      	mov	r4, r0
 80028d4:	460d      	mov	r5, r1
 80028d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028da:	e729      	b.n	8002730 <__ieee754_log+0x148>
 80028dc:	2000      	movs	r0, #0
 80028de:	2100      	movs	r1, #0
 80028e0:	e695      	b.n	800260e <__ieee754_log+0x26>
 80028e2:	bf00      	nop
 80028e4:	f3af 8000 	nop.w
 80028e8:	fee00000 	.word	0xfee00000
 80028ec:	3fe62e42 	.word	0x3fe62e42
 80028f0:	35793c76 	.word	0x35793c76
 80028f4:	3dea39ef 	.word	0x3dea39ef
 80028f8:	55555555 	.word	0x55555555
 80028fc:	3fd55555 	.word	0x3fd55555
 8002900:	df3e5244 	.word	0xdf3e5244
 8002904:	3fc2f112 	.word	0x3fc2f112
 8002908:	96cb03de 	.word	0x96cb03de
 800290c:	3fc74664 	.word	0x3fc74664
 8002910:	94229359 	.word	0x94229359
 8002914:	3fd24924 	.word	0x3fd24924
 8002918:	55555593 	.word	0x55555593
 800291c:	3fe55555 	.word	0x3fe55555
 8002920:	d078c69f 	.word	0xd078c69f
 8002924:	3fc39a09 	.word	0x3fc39a09
 8002928:	1d8e78af 	.word	0x1d8e78af
 800292c:	3fcc71c5 	.word	0x3fcc71c5
 8002930:	9997fa04 	.word	0x9997fa04
 8002934:	3fd99999 	.word	0x3fd99999
 8002938:	c3500000 	.word	0xc3500000
 800293c:	43500000 	.word	0x43500000
 8002940:	7fefffff 	.word	0x7fefffff
 8002944:	3ff00000 	.word	0x3ff00000
 8002948:	3fe00000 	.word	0x3fe00000

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
